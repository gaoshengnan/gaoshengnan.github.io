{"meta":{"title":"SEINA","subtitle":"SEINA BLOG","description":"个人博客，主要记录笔者在程序媛道路上的技术成长和思想沉淀，也会涉及一些开源技术官方文档翻译～由于博客刚刚搭建几天，评论等个别功能尚未集成，敬请谅解，笔者有时间一定会尽快完善～","author":"John Doe","url":"http://seina.top"},"pages":[{"title":"404 Page Not Found","date":"2017-08-04T15:36:59.000Z","updated":"2018-11-08T17:06:18.484Z","comments":true,"path":"404.html","permalink":"http://seina.top/404.html","excerpt":"","text":""},{"title":"404 Page Not Found","date":"2017-08-04T15:36:59.000Z","updated":"2018-11-08T08:15:56.058Z","comments":true,"path":"index.html","permalink":"http://seina.top/index.html","excerpt":"","text":""},{"title":"about","date":"2018-11-08T08:13:39.000Z","updated":"2018-11-15T02:54:32.522Z","comments":true,"path":"about/index.html","permalink":"http://seina.top/about/index.html","excerpt":"","text":"关与笔者高胜男，又名笙南，现任职于上海DaoCloud微服务开发工程师，主要研究方向是微服务架构落地方案、DevOps持续集成交付、容器编排等。 不喜欢知其然而不知其所以然的流氓工程师，虽然只有不满一年编程经验，但始终在钻研技术原理的道路上前行 座右铭命运给你一个比别人低的起点是想告诉你，让你用你的一生去奋斗出一个绝地反击的故事。这个故事关于独立、关于梦想、关于勇气、关于坚忍，它不是一个水到渠成的童话，没有一点点人间疾苦，这个故事是有志者事竟成，破釜沉舟，百二秦关终属楚，这个故事是苦心人天不负，卧薪尝胆，三千越甲可吞吴! 关于博客 博客迁移：原来在csdn博客上面写文章，上面的文章并没有全部挪动过来，实在很忙-.-好奇的直接点过去看哈～ 一直以来都想有一个自己的博客，本博客网站基于Hexo的主题进行二次整改，感谢原博主的主题，尊重原创，尊重版权。整改后的博客欢迎大家Star，有问题可以提问，我看到之后会在第一时间回复，也可以扫描最下面二维码加我微信讨论～ 由于平时工作以及各项学习任务缠身，博客暂时还有评论功能，访问统计量，友情链接模块等功能，搜索功能也暂时不够强大，后续都会慢慢实现和优化哒～ 关于编程底层基础决定上层建筑，想要成为一名优秀的程序员，建议注重个人基础学习，比如计算机网络基础，23中常见设计模式，数据结构和算法等leetCode什么的刷起来。。。从现在开始吧，不留余力地努力吧，最差的结果，也不过是大器晚成。为什么强调程序员要学习算法和设计模式，第一点，可以写出性能更优的代码，不至于自己嫌弃自己的代码，全等着CodeReview～第二点，大脑思考能力是个人最重要的核心竞争力，而算法是为数不多的能够有效训练大脑思考能力的途径之一 关于学习英语没准哪天真的有机会出国留学进修一下，就因为英语不行走不了？哇靠。。想想都很难受～所以，加油吧，什么时候都不算晚，最晚的是迟迟不肯开始！"},{"title":"search","date":"2018-11-08T08:14:36.000Z","updated":"2018-11-08T08:14:59.123Z","comments":true,"path":"search/index.html","permalink":"http://seina.top/search/index.html","excerpt":"","text":""}],"posts":[{"title":"如何快速的理解什么是微服务？","slug":"microservice","date":"2018-11-11T14:48:37.000Z","updated":"2018-11-14T03:26:11.278Z","comments":true,"path":"2018/11/11/microservice/","link":"","permalink":"http://seina.top/2018/11/11/microservice/","excerpt":"","text":"维基百科定义微服务 维基百科定义微服务：微服务的概念最早实在2014年由MArtin Fowler和James Lewis共同提出，他们定义了微服务是由单一应用程序构成的小服务，拥有自己的进程和轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用HTTP API通讯。同时。服务会使用最小规模的集中管理（如Docker）技术，服务可以用不同的编程语言和数据库等。 好吧，可能看完了上面一段话反而觉得更难理解了，老外说的话一向都是这么生涩难懂，其实在我看来，要想深刻理解微服务的价值，需要先感受一下单体应用的痛苦！ 单体应用架构的不足以MVC架构为例，业务通常通过部署一个WAR包到Tomcat中，然后启动Tomcat，监听某个端口号即可对外提供服务。早期在业务规模不大，开发团队人员规模较小的时候，采用单体应用架构，团队的开发和运维成本都可控，虽然偶尔也会解决一下冲突-.-。然而随着业务规模越来越大，代码越来越多，依赖的资源也很多，应用编译打包、部署测试一次，甚至需要10分钟以上，部署效率低下。 团队开发人员不断的扩张，彼此协作开发成本高，比如超过十个人协作修改代码，最后合并到master分支，一起打包部署，这样到了测试阶段只要有一块功能有问题，就得重新编译打包部署，然后重新预览测试，所有开发人员参与其中，效率超低。。 系统的高可用性差，一旦某个功能涉及的代码或者资源有问题，就会影响系统的可用性。比如某段代码不停的创建大对象，并且没有回收，运行一段时间后导致JVM内存泄漏，异常退出，那么部署在同一个JVM进程中的所有服务都不可用，后果很严重。。 我理解的微服务为了解决以上问题，服务化的思想诞生了。通俗来讲，服务化就是把传统的单体应用中通过JAR包依赖产生的本地方法调用，改造成RPC接口产生的远程方法调用。 我过去的项目经历里，比如项目包含用户模块，权限模块，应用模块等，其中权限模块需要调用用户模块取用户信息，应用模块也需要，所以把用户模块拆分出来，独立成一个服务部署，以RPC接口的形式对外提供服务，这样当权限模块调用用户服务的时候从进程内的调用变成远程RPC调用，这样，用户服务就可以独立开发部署测试上线和运维，可以交由专门的团队来做。 什么时候进行服务化拆分：项目第一个阶段主要目标是快速开发和验证想法，证明产品思路是可行。这个阶段的功能设计一般不会太复杂，开发采取快速迭代的方式，架构设计也不适合过度。所有功能打包部署在一起开发测试运维，是最高效也是最节约成本的方式。当可行性验证通过，功能进一步迭代，就可以加入越来越多的新特性。 服务化拆分的两个姿势: 纵向拆分，是从业务维度进行拆分，关联比较密切的拆分成一个微服务，而功能相对独立的业务员适合拆分成一个微服务 横向拆分，将公共且独立的功能模块拆分成一个微服务，即公共的被多个其他服务调用，且依赖的资源不与其他业务耦合 小总结：服务化拆分粒度更细，服务独立部署，独立维护，服务治理要求能力高一些。拆分成微服务之后服务的数量变多，需要统一的服务治理平台，来对各个服务进行管理 可见通过服务化，可以解决单体应用膨胀、团队开发耦合度高、协作效率低下的问题。在我看来，微服务发展到现在，已经不再单单局限于微服务架构本身，还与容器化、DevOps 等新的理念相结合，成为当前移动互联网时代最先进的业务架构解决方案，能更好地迎合移动互联网业务快速迭代的要求。 服务化拆分必须要面临的问题 服务如何定义：对于微服务来说，每个服务都运行在各自的进程中，应该以接口的形式向外界传达自己的信息，无论采用哪种通讯协议，是HTTP还是RPC，服务之间的调用都通过接口描述来约定，约定包括接口名，接口参数以及接口的返回值 服务如何发布和订阅：服务调用者如何获取到需要调用服务的地址，这就需要一个注册中心 服务如何监控：通常对于一个服务，我们最关心的是 QPS（调用量）、AvgTime（平均耗时）以及 P999（99.9% 的请求性能在多少毫秒以内）这些指标。这时候你就需要一种通用的监控方案，能够覆盖业务埋点、数据收集、数据处理，最后到数据展示的全链路功能。 服务如何治理：可以想象，拆分为微服务架构后，服务的数量变多了，依赖关系也变复杂了。比如一个服务的性能有问题时，依赖的服务都势必会受到影响。可以设定一个调用性能阈值，如果一段时间内一直超过这个值，那么依赖服务的调用可以直接返回，这就是熔断，也是服务治理最常用的手段之一。","categories":[{"name":"初识微服务","slug":"初识微服务","permalink":"http://seina.top/categories/初识微服务/"}],"tags":[{"name":"微服务架构","slug":"微服务架构","permalink":"http://seina.top/tags/微服务架构/"}],"keywords":[{"name":"初识微服务","slug":"初识微服务","permalink":"http://seina.top/categories/初识微服务/"}]},{"title":"ElasticSearch-关于映射类型的那些事","slug":"ELasticSearch","date":"2018-11-09T03:33:44.000Z","updated":"2018-11-12T02:56:00.262Z","comments":true,"path":"2018/11/09/ELasticSearch/","link":"","permalink":"http://seina.top/2018/11/09/ELasticSearch/","excerpt":"","text":"删除映射类型 在Elasticsearch 6.0.0 或者更高版本中创建的索引可能只包含单个映射类型，在5.x中创建的索引具有多种映射类型，这个功能将继续在6.x之前运行，映射类型将在7.0.0中完全删除。（5.x-6.x:多种映射类型，6.x之后单个映射类型，7.0.0中映射类型完全消失） 什么是映射类型?自从Elasticsearch首个稳定版本发布以来，每个文档存储在单个索引里，并且分配映射类型，映射类型用来表示要编制索引的文档或者实体的类型，例如twitter索引可能具有user类型和tweet类型。 每个映射类型都有自己的字段，user类型也许有full_name字段，user_name字段，email字段，当然tweet也有content字段，tweeted_at字段和像user类型一样的user_name字段。 每个文档有一个_type元字段包含类型的名字，并且通过在URL指定类型名称s，可以将搜索限制为一种或多种类型： 12345678GET twitter/user,tweet/_search&#123; \"query\": &#123; \"match\": &#123; \"user_name\": \"kimchy\" &#125; &#125;&#125; 这个_type字段和文档的_id结合字段生成_uid字段，所以有相同_id字段的不同类型的文档可以存在同一个索引里。 映射类型也用在建立文档之间的亲子关系，就是question类型的文档可能和answer文档有亲子系。 为什么映射类型会被删除？最初，我们谈到的索引类似SQL数据库中的数据库，类型相当于表。 这是一个很糟糕的比喻，导致了错误的假设，在SQL数据库里，表是彼此相互独立的，这个表中的列和另一个表中同样名字的列没有关系，映射类型中的字段不是这种情况。 在ElasticSearch索引中，在不同映射类型中有相同名字的字段在内部由相同的Lucene字段支持，换而言之，使用上面的例子，user类型中user_name字段被存储在与tweet类型的user_name字段名字相同的字段中，并且这两个不同类型的user_name字段必须有完全相同的映射。 当你想要删除一个类型的date字段和同一个索引中另一个类型的另一个boolean字段时，这可能会很令人绝望。 更重要的是，存储在同一个索引中具有很少或者没有共同字段的不同实体会导致稀疏数据并干扰Lucene有效压缩文档的能力。 综合这些原因，我们决定从ElasticSearch中删除映射类型的概念。 映射类型的替代方法Index per document type第一个替代方法是每个索引对应一个文档类型，不像原来将tweet和user存储在一个twitter索引中，你可以在tweets索引中存储tweets类型和在user索引中存储user类型，索引完全彼此相互独立，因此索引之间不会有字段冲突（比如上文描述的同一索引中不同类型的user_name）这个方法有两个好处: 数据更可能是密集的，并且有益于Lucene中使用压缩技术 用于全文搜索评分更可能是准确的，因为同一索引中的所有文档都代表单个实体。 每个索引都可以适应文档的数量进行大小调整：您可以为user索引使用较少数量的主分片，为tweets索引使用较大的主分片。 自定义类型字段当然，集群中可以存在多少个主分片是有限制的，也许你并想要浪费整个主分片来存储几千个文档的集合，这种情况下，你可以实现你自己自定义的类型，工作方式和原来的_type一样。","categories":[{"name":"ElasticSearch6.4官方文档翻译","slug":"ElasticSearch6-4官方文档翻译","permalink":"http://seina.top/categories/ElasticSearch6-4官方文档翻译/"}],"tags":[{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"http://seina.top/tags/ElasticSearch/"}],"keywords":[{"name":"ElasticSearch6.4官方文档翻译","slug":"ElasticSearch6-4官方文档翻译","permalink":"http://seina.top/categories/ElasticSearch6-4官方文档翻译/"}]},{"title":"常见设计原则-单一职责原则","slug":"singleResponsibility","date":"2018-11-05T03:30:50.000Z","updated":"2018-11-14T08:45:57.452Z","comments":true,"path":"2018/11/05/singleResponsibility/","link":"","permalink":"http://seina.top/2018/11/05/singleResponsibility/","excerpt":"","text":"小例子带你进入场景例如我们日常生活中的手机，里面有摄像机、照片机、打电话、听音乐等多个功能，虽然手机小巧携带方便，但是显而易见，我们都知道手机的摄像功能没有摄像机拍摄的好，拍照功能没有照相机拍的好看。当然手机也只是过渡展品，如果摄像机，照相机像一张卡片那么大，又不失原有强大的拍照摄像功能，可能大家都不会用手机拍照了～ 我们在编程的时候，自然而然的会给一个类增加各种各样的功能，比如我们写一个窗体应用程序，一般都会生成一个Forml这样的类，于是我们就会把各种各样的代码，像某种商业运算的算法呀，像数据库访问的SQL语句呀什么的都写到这样的类中，这就意味着，无论任何时候需求进来，你都需要更改这个窗体类，这其实是很糟糕的，维护麻烦，复用不可能，也缺乏灵活性。 再比如说我之前在高复用返回结果类ResultVO中加入JsonView时，这样一个类就具有了两个功能，后来我们老大说要把ResultVO统一拎出来管理，我那个服务的ResultVO打死也拎不动。。这就很尴尬了，可能当时一个类负责返回结果VO，另一个类负责JsonView展示，可能就会好很多。 用最正确的姿势理解最简单的单一职责原则 单一职责原则：就一个类而言，应该仅有一个引起它变化的原因 如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭到意想不到的破坏。 软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。其实要去判断是否应该分离出来也不是特别难，那就是如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责，就应该考虑类的职责分离。 总结来说，在编程时，我们确实要在类的职责分离上多思考，做到单一职责，这样你的代码才是真正的易维护，易扩展，易复用，灵活多样。","categories":[{"name":"大战设计模式","slug":"大战设计模式","permalink":"http://seina.top/categories/大战设计模式/"}],"tags":[{"name":"设计原则","slug":"设计原则","permalink":"http://seina.top/tags/设计原则/"}],"keywords":[{"name":"大战设计模式","slug":"大战设计模式","permalink":"http://seina.top/categories/大战设计模式/"}]},{"title":"常见设计原则-依赖倒置原则","slug":"dependencyInversion","date":"2018-11-04T03:22:44.000Z","updated":"2018-11-14T07:04:24.734Z","comments":true,"path":"2018/11/04/dependencyInversion/","link":"","permalink":"http://seina.top/2018/11/04/dependencyInversion/","excerpt":"","text":"加深依赖倒置原则定义的理解 依赖倒置原则A. 高层模块不应该依赖底层模块，两者都应该依赖其抽象B. 抽象不应该依赖其细节，细节应该依赖抽象 首先这不是小白级别的博客，只是我用来记录自己有关依赖倒置原则的理解，如果你一点都不了解依赖倒置原则，那么推荐一本大话设计模式～ 好多人看完了依赖倒置原则都不理解，所谓的”倒置”，到底是在哪里，面向过程开发时，为了使得常用代码可以复用，一般都会把这些常用代码写成许许多多函数的程序库，这样我们在做新项目时，去调用这些底层的函数就可以的。比如我们做的项目大多数要访问数据库，所以我们就把访问数据库的代码写成了函数，每次做新项目的时候都要去调用这些函数，这就叫高层模块依赖底层模块。 这其实看起来并没有什么问题，业务逻辑的高层模块都是一样的，但客户希望使用不同的数据库或者存储信息方式，这时就麻烦了，我们希望再次利用这些高层模块，但是高层模块都是和底层模块绑在一起，没办法复用这些高层模块。例如PC电脑里如果CPU、内存、硬盘都需要依赖具体的主板，主板一坏，其他的部件就都没用了，反过来，如果内存坏了，也不应该造成其他部件不可用。 如果高层模块或者底层模块，它们都依赖于抽象，具体一点就是接口或者抽象类，只要接口是稳定的，那么任何一个改动都不用担心其他收到影响。 通过coding进一步加深理解1234课程接口public interface ICourse &#123; void studyCourse();&#125; 123456public class JavaCourse implements ICourse &#123; @Override public void studyCourse() &#123; System.out.println(\"Geely在学习Java课程\"); &#125;&#125; 12345678910public class Geely &#123; private ICourse iCourse; public void setiCourse(ICourse iCourse) &#123; this.iCourse = iCourse; &#125; //给Geely一个学习课程的方法 public void studyImoocCourse()&#123; iCourse.studyCourse(); &#125;&#125; 123456789101112131415public class Test &#123;/** * 课程接口中有一个学习课程方法，有一个实现类重写了这个课程接口的方法 * Geely有一个课程接口的属性，设置课程的方法，学习课程的方法（其中调用课程接口的学习课程的方法） * @param args */ public static void main(String[] args) &#123; Geely geely = new Geely(); //给Geely设置哪个课程，他就会调用哪个课程的学习方法 geely.setiCourse(new JavaCourse()); geely.studyImoocCourse(); geely.setiCourse(new FECourse()); geely.studyImoocCourse();&#125; 上述代码中，ICourse接口是固定不变，Test应用层应该没有依赖底层的Geely，而是Geely和Test都依赖其接口ICourse。 以上例子来源于java设计模式精讲 Debug 方式+内存分析，以及大话设计模式pdf–&gt;密码:ugu3","categories":[{"name":"大战设计模式","slug":"大战设计模式","permalink":"http://seina.top/categories/大战设计模式/"}],"tags":[{"name":"设计原则","slug":"设计原则","permalink":"http://seina.top/tags/设计原则/"}],"keywords":[{"name":"大战设计模式","slug":"大战设计模式","permalink":"http://seina.top/categories/大战设计模式/"}]},{"title":"常见设计原则-开闭原则","slug":"openClose","date":"2018-11-03T03:31:38.000Z","updated":"2018-11-14T03:56:36.740Z","comments":true,"path":"2018/11/03/openClose/","link":"","permalink":"http://seina.top/2018/11/03/openClose/","excerpt":"","text":"设计原则 包括：开闭原则，依赖倒置原则，单一职责原则，接口隔离原则，最少知道原则(迪米特法则)，里氏替换原则，合成复用原则(组合复用原则)。在实际开发过程中讲究一个平衡和取舍，要在适当的场景遵循设计原则，不要过度设计。 开闭原则定义：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭，即可以扩展，不可以修改。用抽象构建框架，用实现扩展细节。优点：提高软件系统的可复用性及可维护性经典例子：一国两制，弹性8小时打卡 核心思想：实现开闭原则的核心是面向抽象编程，而不是面向具体的实现编程 我们在做任何系统的时候，都不要指定系统一开始的时候需求确定，就再也不会变化，这是不现实也不科学的想法，那么既然需求一定会变化，我们就应该重点关注怎么设计才能面对需求的改变却可以保持相对稳定。 越底层模块的变化影响的范围越大，越高层模块的变化影响的范围越小，简单理解，如果dao层被很多Service实现，如果改dao层，可能影响到其他模块的service，controller等。 如果接口里面有很多方法，实现类里面逻辑又很复杂，一旦改变了，风险很大，所以接口不应该经常变化，应该是稳定的，否则接口作为契约这个功能就失去了。既然抽象相对而言是稳定的，那么让类依赖于固定的抽象，就尽量不要修改原来稳定的代码，而通过面向对象的继承以及多态体的机制，就可以实现对抽象体的继承，通过重写改变其固有的方法，或者实现新的扩展方法，所以对扩展是开放对。 无论模块是多么封闭，都会存在一些无法对之封闭的变化。在我们最开始写代码的时候假设不会发生变化。当发生变化的时候，我们就立即采取行动，创建抽象来隔离以后发生的类似的变化。 小总结：面对需求，我们对代码的改动是通过增加新代码进行的，而不是改动现有的代码。","categories":[{"name":"大战设计模式","slug":"大战设计模式","permalink":"http://seina.top/categories/大战设计模式/"}],"tags":[{"name":"设计原则","slug":"设计原则","permalink":"http://seina.top/tags/设计原则/"}],"keywords":[{"name":"大战设计模式","slug":"大战设计模式","permalink":"http://seina.top/categories/大战设计模式/"}]},{"title":"常见设计原则-组合复用原则","slug":"compositeReuse","date":"2018-11-03T01:28:37.000Z","updated":"2018-11-14T08:52:54.301Z","comments":true,"path":"2018/11/03/compositeReuse/","link":"","permalink":"http://seina.top/2018/11/03/compositeReuse/","excerpt":"","text":"","categories":[{"name":"大战设计模式","slug":"大战设计模式","permalink":"http://seina.top/categories/大战设计模式/"}],"tags":[{"name":"设计原则","slug":"设计原则","permalink":"http://seina.top/tags/设计原则/"}],"keywords":[{"name":"大战设计模式","slug":"大战设计模式","permalink":"http://seina.top/categories/大战设计模式/"}]},{"title":"常见设计原则-里氏替换原则","slug":"ridleyReplace","date":"2018-11-02T03:28:42.000Z","updated":"2018-11-14T14:35:17.146Z","comments":true,"path":"2018/11/02/ridleyReplace/","link":"","permalink":"http://seina.top/2018/11/02/ridleyReplace/","excerpt":"","text":"里氏替换原则：子类型必须能够替换掉它们的父类型。 含义1：子类可以实现父类的抽象方法，但是不可以覆盖父类的非抽象方法含义2：子类中可以增加自己特有的方法含义3：当子类的方法重写父类的方法时，方法的前置条件(即方法的输入/输出)要比父类方法的输入参数更宽松含义4：当子类的方法实现父类的方法时(重写/重载/实现抽象方法)，方法的后置条件(即方法的输出/返回值)要比父类更严格或者相等 一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类和子类对象的区别，也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化，简单地说，子类型必须能够替换掉它们的父类型。 如果面向对象设计时，一个是鸟类，一个是企鹅类，如果鸟是可以飞的，企鹅不会飞，那么企鹅是鸟吗？企鹅可以继承鸟这个类吗？显然是不可以的，子类拥有父类所有非private的行为和属性。鸟会飞，而企鹅不会飞。尽管在生物学分类上，企鹅是一种鸟，但在编程世界里，企鹅不能以父类–鸟的身份出现，因为前提是说所有鸟都能飞，企鹅不能飞，所以企鹅不能继承鸟类。 也正是因为有了里氏替换原则，使得继承复用成为可能，只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正地被复用，而子类也能够在父类的基础上增加新的行为。比如说猫是继承动物类的，以动物的身份拥有吃、喝、跑、叫等行为，可当某一天，我们需要狗、牛、羊也拥有类似的行为，由于它们都是继承动物，所以更改实例化的地方，程序其他处都不需要改变。需要变化的是猫更换成狗、牛、羊等别的动物，程序其他地方不需要改变。 正是由于子类型的可替换性才使得使用父类类型的模块在无需修改的情况下就可以扩展","categories":[{"name":"大战设计模式","slug":"大战设计模式","permalink":"http://seina.top/categories/大战设计模式/"}],"tags":[{"name":"设计原则","slug":"设计原则","permalink":"http://seina.top/tags/设计原则/"}],"keywords":[{"name":"大战设计模式","slug":"大战设计模式","permalink":"http://seina.top/categories/大战设计模式/"}]}]}