<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SEINA</title>
  
  <subtitle>SEINA BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://seina.top/"/>
  <updated>2018-11-14T03:26:11.278Z</updated>
  <id>http://seina.top/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何快速的理解什么是微服务？</title>
    <link href="http://seina.top/2018/11/11/microservice/"/>
    <id>http://seina.top/2018/11/11/microservice/</id>
    <published>2018-11-11T14:48:37.000Z</published>
    <updated>2018-11-14T03:26:11.278Z</updated>
    
    <content type="html"><![CDATA[<h3 id="维基百科定义微服务"><a href="#维基百科定义微服务" class="headerlink" title="维基百科定义微服务"></a>维基百科定义微服务</h3><blockquote><p>维基百科定义微服务：微服务的概念最早实在2014年由MArtin Fowler和James Lewis共同提出，他们定义了微服务是由单一应用程序构成的小服务，拥有自己的进程和轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用HTTP API通讯。同时。服务会使用最小规模的集中管理（如Docker）技术，服务可以用不同的编程语言和数据库等。</p></blockquote><p>好吧，可能看完了上面一段话反而觉得更难理解了，老外说的话一向都是这么生涩难懂，其实在我看来，要想深刻理解微服务的价值，需要先感受一下单体应用的痛苦！</p><h3 id="单体应用架构的不足"><a href="#单体应用架构的不足" class="headerlink" title="单体应用架构的不足"></a>单体应用架构的不足</h3><p>以MVC架构为例，业务通常通过部署一个WAR包到Tomcat中，然后启动Tomcat，监听某个端口号即可对外提供服务。早期在业务规模不大，开发团队人员规模较小的时候，采用单体应用架构，团队的开发和运维成本都可控，虽然偶尔也会解决一下冲突-.-。然而随着业务规模越来越大，代码越来越多，依赖的资源也很多，应用编译打包、部署测试一次，甚至需要10分钟以上，部署效率低下。</p><p>团队开发人员不断的扩张，彼此协作开发成本高，比如超过十个人协作修改代码，最后合并到master分支，一起打包部署，这样到了测试阶段只要有一块功能有问题，就得重新编译打包部署，然后重新预览测试，所有开发人员参与其中，效率超低。。</p><p>系统的高可用性差，一旦某个功能涉及的代码或者资源有问题，就会影响系统的可用性。比如某段代码不停的创建大对象，并且没有回收，运行一段时间后导致JVM内存泄漏，异常退出，那么部署在同一个JVM进程中的所有服务都不可用，后果很严重。。</p><h3 id="我理解的微服务"><a href="#我理解的微服务" class="headerlink" title="我理解的微服务"></a>我理解的微服务</h3><p>为了解决以上问题，服务化的思想诞生了。通俗来讲，服务化就是把传统的单体应用中通过JAR包依赖产生的本地方法调用，改造成RPC接口产生的远程方法调用。</p><p>我过去的项目经历里，比如项目包含用户模块，权限模块，应用模块等，其中权限模块需要调用用户模块取用户信息，应用模块也需要，所以把用户模块拆分出来，独立成一个服务部署，以RPC接口的形式对外提供服务，这样当权限模块调用用户服务的时候从进程内的调用变成远程RPC调用，这样，用户服务就可以独立开发部署测试上线和运维，可以交由专门的团队来做。</p><blockquote><p>什么时候进行服务化拆分：项目第一个阶段主要目标是快速开发和验证想法，证明产品思路是可行。这个阶段的功能设计一般不会太复杂，开发采取快速迭代的方式，架构设计也不适合过度。所有功能打包部署在一起开发测试运维，是最高效也是最节约成本的方式。当可行性验证通过，功能进一步迭代，就可以加入越来越多的新特性。</p></blockquote><blockquote><p>服务化拆分的两个姿势: </p><ol><li>纵向拆分，是从业务维度进行拆分，关联比较密切的拆分成一个微服务，而功能相对独立的业务员适合拆分成一个微服务</li><li>横向拆分，将公共且独立的功能模块拆分成一个微服务，即公共的被多个其他服务调用，且依赖的资源不与其他业务耦合</li></ol></blockquote><blockquote><p>小总结：服务化拆分粒度更细，服务独立部署，独立维护，服务治理要求能力高一些。拆分成微服务之后服务的数量变多，需要统一的服务治理平台，来对各个服务进行管理</p></blockquote><p>可见通过服务化，可以解决单体应用膨胀、团队开发耦合度高、协作效率低下的问题。在我看来，微服务发展到现在，已经不再单单局限于微服务架构本身，还与容器化、DevOps 等新的理念相结合，成为当前移动互联网时代最先进的业务架构解决方案，能更好地迎合移动互联网业务快速迭代的要求。</p><h3 id="服务化拆分必须要面临的问题"><a href="#服务化拆分必须要面临的问题" class="headerlink" title="服务化拆分必须要面临的问题"></a>服务化拆分必须要面临的问题</h3><ol><li><p>服务如何定义：对于微服务来说，每个服务都运行在各自的进程中，应该以接口的形式向外界传达自己的信息，无论采用哪种通讯协议，是HTTP还是RPC，服务之间的调用都通过接口描述来约定，约定包括接口名，接口参数以及接口的返回值</p></li><li><p>服务如何发布和订阅：服务调用者如何获取到需要调用服务的地址，这就需要一个注册中心</p></li><li><p>服务如何监控：通常对于一个服务，我们最关心的是 QPS（调用量）、AvgTime（平均耗时）以及 P999（99.9% 的请求性能在多少毫秒以内）这些指标。这时候你就需要一种通用的监控方案，能够覆盖业务埋点、数据收集、数据处理，最后到数据展示的全链路功能。</p></li><li><p>服务如何治理：可以想象，拆分为微服务架构后，服务的数量变多了，依赖关系也变复杂了。比如一个服务的性能有问题时，依赖的服务都势必会受到影响。可以设定一个调用性能阈值，如果一段时间内一直超过这个值，那么依赖服务的调用可以直接返回，这就是熔断，也是服务治理最常用的手段之一。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;维基百科定义微服务&quot;&gt;&lt;a href=&quot;#维基百科定义微服务&quot; class=&quot;headerlink&quot; title=&quot;维基百科定义微服务&quot;&gt;&lt;/a&gt;维基百科定义微服务&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;维基百科定义微服务：微服务的概念最早实在2014年由MAr
      
    
    </summary>
    
      <category term="初识微服务" scheme="http://seina.top/categories/%E5%88%9D%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务架构" scheme="http://seina.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch-关于映射类型的那些事</title>
    <link href="http://seina.top/2018/11/09/ELasticSearch/"/>
    <id>http://seina.top/2018/11/09/ELasticSearch/</id>
    <published>2018-11-09T03:33:44.000Z</published>
    <updated>2018-11-12T02:56:00.262Z</updated>
    
    <content type="html"><![CDATA[<h3 id="删除映射类型"><a href="#删除映射类型" class="headerlink" title="删除映射类型"></a>删除映射类型</h3><blockquote><p>在Elasticsearch 6.0.0 或者更高版本中创建的索引可能只包含单个映射类型，在5.x中创建的索引具有多种映射类型，这个功能将继续在6.x之前运行，映射类型将在7.0.0中完全删除。<br>（5.x-6.x:多种映射类型，6.x之后单个映射类型，7.0.0中映射类型完全消失）</p></blockquote><h3 id="什么是映射类型"><a href="#什么是映射类型" class="headerlink" title="什么是映射类型?"></a>什么是映射类型?</h3><p>自从Elasticsearch首个稳定版本发布以来，每个文档存储在单个索引里，并且分配映射类型，映射类型用来表示要编制索引的文档或者实体的类型，例如twitter索引可能具有user类型和tweet类型。</p><p>每个映射类型都有自己的字段，user类型也许有full_name字段，user_name字段，email字段，当然tweet也有content字段，tweeted_at字段和像user类型一样的user_name字段。</p><p>每个文档有一个_type元字段包含类型的名字，并且通过在URL指定类型名称s，可以将搜索限制为一种或多种类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/user,tweet/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"user_name"</span>: <span class="string">"kimchy"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个_type字段和文档的_id结合字段生成_uid字段，所以有相同_id字段的不同类型的文档可以存在同一个索引里。</p><p>映射类型也用在建立文档之间的亲子关系，就是question类型的文档可能和answer文档有亲子系。</p><h3 id="为什么映射类型会被删除？"><a href="#为什么映射类型会被删除？" class="headerlink" title="为什么映射类型会被删除？"></a>为什么映射类型会被删除？</h3><p>最初，我们谈到的索引类似SQL数据库中的数据库，类型相当于表。</p><p>这是一个很糟糕的比喻，导致了错误的假设，在SQL数据库里，表是彼此相互独立的，这个表中的列和另一个表中同样名字的列没有关系，映射类型中的字段不是这种情况。</p><p>在ElasticSearch索引中，在不同映射类型中有相同名字的字段在内部由相同的Lucene字段支持，换而言之，使用上面的例子，user类型中user_name字段被存储在与tweet类型的user_name字段名字相同的字段中，并且这两个不同类型的user_name字段必须有完全相同的映射。</p><p>当你想要删除一个类型的date字段和同一个索引中另一个类型的另一个boolean字段时，这可能会很令人绝望。</p><p>更重要的是，存储在同一个索引中具有很少或者没有共同字段的不同实体会导致稀疏数据并干扰Lucene有效压缩文档的能力。</p><p>综合这些原因，我们决定从ElasticSearch中删除映射类型的概念。</p><h3 id="映射类型的替代方法"><a href="#映射类型的替代方法" class="headerlink" title="映射类型的替代方法"></a>映射类型的替代方法</h3><h5 id="Index-per-document-type"><a href="#Index-per-document-type" class="headerlink" title="Index per document type"></a>Index per document type</h5><p>第一个替代方法是每个索引对应一个文档类型，不像原来将tweet和user存储在一个twitter索引中，你可以在tweets索引中存储tweets类型和在user索引中存储user类型，索引完全彼此相互独立，因此索引之间不会有字段冲突（比如上文描述的同一索引中不同类型的user_name）<br>这个方法有两个好处:</p><ol><li>数据更可能是密集的，并且有益于Lucene中使用压缩技术</li><li>用于全文搜索评分更可能是准确的，因为同一索引中的所有文档都代表单个实体。</li></ol><p>每个索引都可以适应文档的数量进行大小调整：您可以为user索引使用较少数量的主分片，为tweets索引使用较大的主分片。</p><h5 id="自定义类型字段"><a href="#自定义类型字段" class="headerlink" title="自定义类型字段"></a>自定义类型字段</h5><p>当然，集群中可以存在多少个主分片是有限制的，也许你并想要浪费整个主分片来存储几千个文档的集合，这种情况下，你可以实现你自己自定义的类型，工作方式和原来的_type一样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;删除映射类型&quot;&gt;&lt;a href=&quot;#删除映射类型&quot; class=&quot;headerlink&quot; title=&quot;删除映射类型&quot;&gt;&lt;/a&gt;删除映射类型&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在Elasticsearch 6.0.0 或者更高版本中创建的索引可能只包含单个映
      
    
    </summary>
    
      <category term="ElasticSearch6.4官方文档翻译" scheme="http://seina.top/categories/ElasticSearch6-4%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="ElasticSearch" scheme="http://seina.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>常见设计原则-迪米特法则</title>
    <link href="http://seina.top/2018/11/09/dimetRule/"/>
    <id>http://seina.top/2018/11/09/dimetRule/</id>
    <published>2018-11-09T03:28:47.000Z</published>
    <updated>2018-11-14T04:09:41.626Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="大战设计模式" scheme="http://seina.top/categories/%E5%A4%A7%E6%88%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计原则" scheme="http://seina.top/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>常见设计原则-里氏替换原则</title>
    <link href="http://seina.top/2018/11/09/ridleyReplace/"/>
    <id>http://seina.top/2018/11/09/ridleyReplace/</id>
    <published>2018-11-09T03:28:42.000Z</published>
    <updated>2018-11-14T04:09:41.631Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="大战设计模式" scheme="http://seina.top/categories/%E5%A4%A7%E6%88%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计原则" scheme="http://seina.top/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>常见设计原则-组合复用原则</title>
    <link href="http://seina.top/2018/11/09/compositeReuse/"/>
    <id>http://seina.top/2018/11/09/compositeReuse/</id>
    <published>2018-11-09T03:28:37.000Z</published>
    <updated>2018-11-14T04:09:41.635Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="大战设计模式" scheme="http://seina.top/categories/%E5%A4%A7%E6%88%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计原则" scheme="http://seina.top/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://seina.top/2018/11/09/hello-world/"/>
    <id>http://seina.top/2018/11/09/hello-world/</id>
    <published>2018-11-08T17:18:43.750Z</published>
    <updated>2018-11-08T17:18:43.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p>$ hexo deploy</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常见设计原则-单一职责原则</title>
    <link href="http://seina.top/2018/11/05/singleResponsibility/"/>
    <id>http://seina.top/2018/11/05/singleResponsibility/</id>
    <published>2018-11-05T03:30:50.000Z</published>
    <updated>2018-11-14T08:45:57.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小例子带你进入场景"><a href="#小例子带你进入场景" class="headerlink" title="小例子带你进入场景"></a>小例子带你进入场景</h3><p>例如我们日常生活中的手机，里面有摄像机、照片机、打电话、听音乐等多个功能，虽然手机小巧携带方便，但是显而易见，我们都知道手机的摄像功能没有摄像机拍摄的好，拍照功能没有照相机拍的好看。当然手机也只是过渡展品，如果摄像机，照相机像一张卡片那么大，又不失原有强大的拍照摄像功能，可能大家都不会用手机拍照了～</p><p>我们在编程的时候，自然而然的会给一个类增加各种各样的功能，比如我们写一个窗体应用程序，一般都会生成一个Forml这样的类，于是我们就会把各种各样的代码，像某种商业运算的算法呀，像数据库访问的SQL语句呀什么的都写到这样的类中，这就意味着，无论任何时候需求进来，你都需要更改这个窗体类，这其实是很糟糕的，维护麻烦，复用不可能，也缺乏灵活性。</p><p>再比如说我之前在高复用返回结果类ResultVO中加入JsonView时，这样一个类就具有了两个功能，后来我们老大说要把ResultVO统一拎出来管理，我那个服务的ResultVO打死也拎不动。。这就很尴尬了，可能当时一个类负责返回结果VO，另一个类负责JsonView展示，可能就会好很多。</p><h3 id="用最正确的姿势理解最简单的单一职责原则"><a href="#用最正确的姿势理解最简单的单一职责原则" class="headerlink" title="用最正确的姿势理解最简单的单一职责原则"></a>用最正确的姿势理解最简单的单一职责原则</h3><blockquote><p>单一职责原则：就一个类而言，应该仅有一个引起它变化的原因</p></blockquote><p>如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭到意想不到的破坏。</p><p>软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。其实要去判断是否应该分离出来也不是特别难，那就是如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责，就应该考虑类的职责分离。</p><blockquote><p>总结来说，在编程时，我们确实要在类的职责分离上多思考，做到单一职责，这样你的代码才是真正的易维护，易扩展，易复用，灵活多样。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;小例子带你进入场景&quot;&gt;&lt;a href=&quot;#小例子带你进入场景&quot; class=&quot;headerlink&quot; title=&quot;小例子带你进入场景&quot;&gt;&lt;/a&gt;小例子带你进入场景&lt;/h3&gt;&lt;p&gt;例如我们日常生活中的手机，里面有摄像机、照片机、打电话、听音乐等多个功能，虽然手机小
      
    
    </summary>
    
      <category term="大战设计模式" scheme="http://seina.top/categories/%E5%A4%A7%E6%88%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计原则" scheme="http://seina.top/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>常见设计原则-依赖倒置原则</title>
    <link href="http://seina.top/2018/11/04/dependencyInversion/"/>
    <id>http://seina.top/2018/11/04/dependencyInversion/</id>
    <published>2018-11-04T03:22:44.000Z</published>
    <updated>2018-11-14T07:04:24.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="加深依赖倒置原则定义的理解"><a href="#加深依赖倒置原则定义的理解" class="headerlink" title="加深依赖倒置原则定义的理解"></a>加深依赖倒置原则定义的理解</h3><blockquote><p>依赖倒置原则<br>A. 高层模块不应该依赖底层模块，两者都应该依赖其抽象<br>B. 抽象不应该依赖其细节，细节应该依赖抽象</p></blockquote><p>首先这不是小白级别的博客，只是我用来记录自己有关依赖倒置原则的理解，如果你一点都不了解依赖倒置原则，那么推荐一本大话设计模式～</p><p>好多人看完了依赖倒置原则都不理解，所谓的”倒置”，到底是在哪里，面向过程开发时，为了使得常用代码可以复用，一般都会把这些常用代码写成许许多多函数的程序库，这样我们在做新项目时，去调用这些底层的函数就可以的。比如我们做的项目大多数要访问数据库，所以我们就把访问数据库的代码写成了函数，每次做新项目的时候都要去调用这些函数，这就叫高层模块依赖底层模块。</p><p>这其实看起来并没有什么问题，业务逻辑的高层模块都是一样的，但客户希望使用不同的数据库或者存储信息方式，这时就麻烦了，我们希望再次利用这些高层模块，但是高层模块都是和底层模块绑在一起，没办法复用这些高层模块。例如PC电脑里如果CPU、内存、硬盘都需要依赖具体的主板，主板一坏，其他的部件就都没用了，反过来，如果内存坏了，也不应该造成其他部件不可用。</p><p>如果高层模块或者底层模块，它们都依赖于抽象，具体一点就是接口或者抽象类，只要接口是稳定的，那么任何一个改动都不用担心其他收到影响。</p><h3 id="通过coding进一步加深理解"><a href="#通过coding进一步加深理解" class="headerlink" title="通过coding进一步加深理解"></a>通过coding进一步加深理解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">课程接口</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICourse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">studyCourse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCourse</span> <span class="keyword">implements</span> <span class="title">ICourse</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Geely在学习Java课程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Geely</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ICourse iCourse;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setiCourse</span><span class="params">(ICourse iCourse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iCourse = iCourse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给Geely一个学习课程的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyImoocCourse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        iCourse.studyCourse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 课程接口中有一个学习课程方法，有一个实现类重写了这个课程接口的方法</span></span><br><span class="line"><span class="comment">     * Geely有一个课程接口的属性，设置课程的方法，学习课程的方法（其中调用课程接口的学习课程的方法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Geely geely = <span class="keyword">new</span> Geely();</span><br><span class="line">        <span class="comment">//给Geely设置哪个课程，他就会调用哪个课程的学习方法</span></span><br><span class="line">        geely.setiCourse(<span class="keyword">new</span> JavaCourse());</span><br><span class="line">        geely.studyImoocCourse();</span><br><span class="line"></span><br><span class="line">        geely.setiCourse(<span class="keyword">new</span> FECourse());</span><br><span class="line">        geely.studyImoocCourse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，ICourse接口是固定不变，Test应用层应该没有依赖底层的Geely，而是Geely和Test都依赖其接口ICourse。</p><p>以上例子来源于<a href="https://coding.imooc.com/learn/list/270.html" target="_blank" rel="noopener">java设计模式精讲 Debug 方式+内存分析</a>，以及<a href="https://pan.baidu.com/s/1gyYmZiiRgxr85mwHz8UCGA" target="_blank" rel="noopener">大话设计模式pdf</a>–&gt;密码:ugu3</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;加深依赖倒置原则定义的理解&quot;&gt;&lt;a href=&quot;#加深依赖倒置原则定义的理解&quot; class=&quot;headerlink&quot; title=&quot;加深依赖倒置原则定义的理解&quot;&gt;&lt;/a&gt;加深依赖倒置原则定义的理解&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;依赖倒置原则&lt;br&gt;A. 
      
    
    </summary>
    
      <category term="大战设计模式" scheme="http://seina.top/categories/%E5%A4%A7%E6%88%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计原则" scheme="http://seina.top/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>常见设计原则-开闭原则</title>
    <link href="http://seina.top/2018/11/03/openClose/"/>
    <id>http://seina.top/2018/11/03/openClose/</id>
    <published>2018-11-03T03:31:38.000Z</published>
    <updated>2018-11-14T03:56:36.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><blockquote><p>包括：开闭原则，依赖倒置原则，单一职责原则，接口隔离原则，最少知道原则(迪米特法则)，里氏替换原则，合成复用原则(组合复用原则)。<br>在实际开发过程中讲究一个平衡和取舍，要在适当的场景遵循设计原则，不要过度设计。</p></blockquote><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>定义：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭，即可以扩展，不可以修改。用抽象构建框架，用实现扩展细节。<br>优点：提高软件系统的可复用性及可维护性<br>经典例子：一国两制，弹性8小时打卡</p><blockquote><p>核心思想：实现开闭原则的核心是面向抽象编程，而不是面向具体的实现编程</p></blockquote><p>我们在做任何系统的时候，都不要指定系统一开始的时候需求确定，就再也不会变化，这是不现实也不科学的想法，那么既然需求一定会变化，我们就应该重点关注怎么设计才能面对需求的改变却可以保持相对稳定。</p><p>越底层模块的变化影响的范围越大，越高层模块的变化影响的范围越小，简单理解，如果dao层被很多Service实现，如果改dao层，可能影响到其他模块的service，controller等。</p><p>如果接口里面有很多方法，实现类里面逻辑又很复杂，一旦改变了，风险很大，所以接口不应该经常变化，应该是稳定的，否则接口作为契约这个功能就失去了。既然抽象相对而言是稳定的，那么让类依赖于固定的抽象，就尽量不要修改原来稳定的代码，而通过面向对象的继承以及多态体的机制，就可以实现对抽象体的继承，通过重写改变其固有的方法，或者实现新的扩展方法，所以对扩展是开放对。</p><p>无论模块是多么封闭，都会存在一些无法对之封闭的变化。在我们最开始写代码的时候假设不会发生变化。当发生变化的时候，我们就立即采取行动，创建抽象来隔离以后发生的类似的变化。</p><blockquote><p>小总结：面对需求，我们对代码的改动是通过增加新代码进行的，而不是改动现有的代码。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;设计原则&quot;&gt;&lt;a href=&quot;#设计原则&quot; class=&quot;headerlink&quot; title=&quot;设计原则&quot;&gt;&lt;/a&gt;设计原则&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;包括：开闭原则，依赖倒置原则，单一职责原则，接口隔离原则，最少知道原则(迪米特法则)，里氏替换原则
      
    
    </summary>
    
      <category term="大战设计模式" scheme="http://seina.top/categories/%E5%A4%A7%E6%88%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计原则" scheme="http://seina.top/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>test333</title>
    <link href="http://seina.top/2017/11/09/test333/"/>
    <id>http://seina.top/2017/11/09/test333/</id>
    <published>2017-11-09T03:28:33.000Z</published>
    <updated>2018-11-14T08:48:05.830Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="初始化测试文章" scheme="http://seina.top/categories/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="测试" scheme="http://seina.top/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>test222</title>
    <link href="http://seina.top/2017/11/09/test222/"/>
    <id>http://seina.top/2017/11/09/test222/</id>
    <published>2017-11-09T03:28:19.000Z</published>
    <updated>2018-11-14T08:48:05.827Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="初始化测试文章" scheme="http://seina.top/categories/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="测试" scheme="http://seina.top/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>test111</title>
    <link href="http://seina.top/2017/11/09/test111/"/>
    <id>http://seina.top/2017/11/09/test111/</id>
    <published>2017-11-09T03:17:50.000Z</published>
    <updated>2018-11-14T08:48:05.835Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="初始化测试文章" scheme="http://seina.top/categories/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="测试" scheme="http://seina.top/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>tags</title>
    <link href="http://seina.top/2017/11/07/tags/"/>
    <id>http://seina.top/2017/11/07/tags/</id>
    <published>2017-11-07T08:28:41.000Z</published>
    <updated>2018-11-14T08:48:05.817Z</updated>
    
    <content type="html"><![CDATA[<p>cover: <a href="http://oxnuwmm3w.bkt.clouddn.com/hello-world.jpeg" target="_blank" rel="noopener">http://oxnuwmm3w.bkt.clouddn.com/hello-world.jpeg</a></p><h1 id="作者信息，多作者则设置为数组"><a href="#作者信息，多作者则设置为数组" class="headerlink" title="作者信息，多作者则设置为数组"></a>作者信息，多作者则设置为数组</h1><h1 id="单作者"><a href="#单作者" class="headerlink" title="单作者"></a>单作者</h1><p>author:<br>  nick: BruceYJ<br>  link: <a href="https://www.github.com/BruceYuj" target="_blank" rel="noopener">https://www.github.com/BruceYuj</a></p><h1 id="多作者"><a href="#多作者" class="headerlink" title="多作者"></a>多作者</h1><p>author:</p><ul><li>nick: BruceYJ<br>link: <a href="https://www.github.com/BruceYuj" target="_blank" rel="noopener">https://www.github.com/BruceYuj</a></li><li>nick: minfive<br>link: <a href="https://www.github.com/Mrminfive" target="_blank" rel="noopener">https://www.github.com/Mrminfive</a></li></ul><h1 id="如果文章为转载文章，需要多加文章出处项"><a href="#如果文章为转载文章，需要多加文章出处项" class="headerlink" title="如果文章为转载文章，需要多加文章出处项"></a>如果文章为转载文章，需要多加文章出处项</h1><p>editor:<br>  name: Minfive<br>  link: <a href="https://www.github.com/Mrminfive" target="_blank" rel="noopener">https://www.github.com/Mrminfive</a></p><h1 id="首页每篇文章的子标题"><a href="#首页每篇文章的子标题" class="headerlink" title="首页每篇文章的子标题"></a>首页每篇文章的子标题</h1><p>subtitle: your subtitle</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;cover: &lt;a href=&quot;http://oxnuwmm3w.bkt.clouddn.com/hello-world.jpeg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://oxnuwmm3w.bkt.clouddn.com/hello-
      
    
    </summary>
    
    
  </entry>
  
</feed>
