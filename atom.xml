<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SEINA</title>
  
  <subtitle>SEINA BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://seina.top/"/>
  <updated>2019-07-01T09:56:39.988Z</updated>
  <id>http://seina.top/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Exception 和 Error 有什么区别？</title>
    <link href="http://seina.top/2019/07/01/ExceptionAndError/"/>
    <id>http://seina.top/2019/07/01/ExceptionAndError/</id>
    <published>2019-06-30T23:01:28.000Z</published>
    <updated>2019-07-01T09:56:39.988Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题一：对比-Exception-和-Error-？"><a href="#问题一：对比-Exception-和-Error-？" class="headerlink" title="问题一：对比 Exception 和 Error ？"></a>问题一：对比 Exception 和 Error ？</h4><p>Exception 和 Error 都是继承了 Throwable 类。</p><p>Exception 是程序正常运行中，可以预料的意外情况，可能并且应该被捕获，进行相应处理。</p><p>Error 是指在正常情况下，不大可能出现的情况，绝大部分的 Error 都会导致程序（比如 JVM 自身）处于非正常的、不可恢复状态，是程序本身无法修复的错误，常见的比如 OutOfMemoryError 之类，都是 Error 的子类。</p><h4 id="问题二：运行时异常和一般异常有什么区别-？"><a href="#问题二：运行时异常和一般异常有什么区别-？" class="headerlink" title="问题二：运行时异常和一般异常有什么区别 ？"></a>问题二：运行时异常和一般异常有什么区别 ？</h4><p>Exception 又分为可检查异常（checked）和不检查异常（unchecked）。</p><p>可检查异常在源代码里必须显式地进行捕获处理，这是编译期检查的一部分。</p><p>不可检查异常就是所谓的运行时异常，类似 NullPointerException、ArrayIndexOutOfBoundsException 之类，通常是可以编码避免的逻辑错误，具体根据需要来判断是否需要捕获，并不会在编译期强制要求。</p><h4 id="问题三：你了解那些-Error、Exception-或者-RuntimeException-？"><a href="#问题三：你了解那些-Error、Exception-或者-RuntimeException-？" class="headerlink" title="问题三：你了解那些 Error、Exception 或者 RuntimeException ？"></a>问题三：你了解那些 Error、Exception 或者 RuntimeException ？</h4><p>Error：</p><p>VirtualMachineError、OutOfMemoryError、StackOverflowError</p><p>Exception：</p><p>IOException 等检查异常</p><p>RuntimeException 运行时异常：NullPointerException、ArrayIndexOutOfBoundsException</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;问题一：对比-Exception-和-Error-？&quot;&gt;&lt;a href=&quot;#问题一：对比-Exception-和-Error-？&quot; class=&quot;headerlink&quot; title=&quot;问题一：对比 Exception 和 Error ？&quot;&gt;&lt;/a&gt;问题一：对比 E
      
    
    </summary>
    
      <category term="Java 核心基础" scheme="http://seina.top/categories/Java-%E6%A0%B8%E5%BF%83%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://seina.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>K个一组翻转链表</title>
    <link href="http://seina.top/2019/01/21/reverseNodesInKGroup/"/>
    <id>http://seina.top/2019/01/21/reverseNodesInKGroup/</id>
    <published>2019-01-21T15:29:52.000Z</published>
    <updated>2019-01-22T02:54:28.552Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>英文版：<a href="https://leetcode.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-nodes-in-k-group/</a></li><li>中文版：<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-nodes-in-k-group/</a></li></ul></blockquote><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>首先，我们以7个结点的链表为例，假设K等于3，那么反转前后链表如下图所示：</p><div align="center"><img src="/img/reverseNodeInKGroup/1.png" height="150" width="700"></div><h3 id="第一轮K个结点反转"><a href="#第一轮K个结点反转" class="headerlink" title="第一轮K个结点反转"></a>第一轮K个结点反转</h3><blockquote><p>注：以下所有思路，请参考上面<a href="https://github.com/gaoshengnan/LeetCode/tree/master/src/main/java/linkedlist/reverseNodesInkGroup" target="_blank" rel="noopener">ReverseNodesInkGroup.java</a>里给出的推荐答案进行阅读。<br>还有head = pre == null ? cur : head，为了不扰乱整理逻辑，这句话暂时先不管，是用来标识时刻变化的链表的第一个结点，以便最后返回。</p></blockquote><p>首先看到推荐答案中代码有点多，没关系，可以先什么都不管，第一轮K个结点反转只要从cur=head入手，然后进入while循环，然后看下图观察cur随count的变化：</p><div align="center"><img src="/img/reverseNodeInKGroup/2.png" height="180" width="700"></div><p>可以看出count从1到3，cur从结点1走到结点3，然后进入if条件语句。开始给start赋值，首先pre是null，所以start表示从head开始，随后给left，start，end，right赋值，赋值之后如下图所示：</p><div align="center"><img src="/img/reverseNodeInKGroup/3.png" height="180" width="700"></div><p>进入resign方法，分别用p，c，n指针来反转K个结点，此处和<a href="https://github.com/gaoshengnan/LeetCode/tree/master/src/main/java/linkedlist/reverseList" target="_blank" rel="noopener">反转单链表</a>思路类似，K个结点反转过程如下图：</p><div align="center"><img src="/img/reverseNodeInKGroup/4.png" height="250" width="700"></div><p>由图可以看出当n等于right的时候停止反转，并将结点1（反转后的尾结点）和结点4（下一组K个结点的首结点）连上。随后将pre指向第一个K组结点反转后的尾结点（也就是下一组K结点的前一个结点），并将cur指向下一组K结点的首结点，以上一轮大的while循环结束。如下图可见指针情况：</p><div align="center"><img src="/img/reverseNodeInKGroup/5.png" height="200" width="700"></div><h3 id="第二轮K个结点反转"><a href="#第二轮K个结点反转" class="headerlink" title="第二轮K个结点反转"></a>第二轮K个结点反转</h3><p>进入第二轮K个结点反转，cur随着count++从结点4移动到结点6，如下图所示：</p><div align="center"><img src="/img/reverseNodeInKGroup/6.png" height="170" width="700"></div><p>然后继续调用resign方法，给left，start，end，right赋值，如下图所示：</p><div align="center"><img src="/img/reverseNodeInKGroup/7.png" height="170" width="700"></div><p>进入resign方法，开始反转第二组K个结点，需要注意的是，此时left不为null，要将上一组K个结点和这一组K个结点连上，如下图：</p><div align="center"><img src="/img/reverseNodeInKGroup/8.png" height="250" width="700"></div><p>最后调整指针如下图：</p><div align="center"><img src="/img/reverseNodeInKGroup/9.png" height="130" width="700"></div><p>然后当count=2时，不满足条件，退出循环，返回head。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;英文版：&lt;a href=&quot;https://leetcode.com/problems/reverse-nodes-in-k-group/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.
      
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://seina.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构和算法" scheme="http://seina.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="链表" scheme="http://seina.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="LeetCode" scheme="http://seina.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Activiti6.0.0工作流引擎的web程序设计器</title>
    <link href="http://seina.top/2019/01/18/activitiWebBpmn/"/>
    <id>http://seina.top/2019/01/18/activitiWebBpmn/</id>
    <published>2019-01-18T03:36:01.000Z</published>
    <updated>2019-01-18T07:38:09.507Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、流程设计器环境搭建步骤"><a href="#一、流程设计器环境搭建步骤" class="headerlink" title="一、流程设计器环境搭建步骤"></a>一、流程设计器环境搭建步骤</h3><ol><li>首先在<a href="https://www.activiti.org/" target="_blank" rel="noopener">Activiti</a>官网下载activiti6.0.0</li><li>然后下载<a href="http://mirror.bit.edu.cn/apache/tomcat/" target="_blank" rel="noopener">Tomcat8.0.53</a></li><li>最后把activiti-6.0.0/wars/activiti-admin.war 和 activiti-6.0.0/wars/activiti-app.war放到tomcat的webapp目录下</li></ol><h3 id="二、Activiti6-0-0-bpmn20-web"><a href="#二、Activiti6-0-0-bpmn20-web" class="headerlink" title="二、Activiti6.0.0-bpmn20-web"></a>二、Activiti6.0.0-bpmn20-web</h3><p>Activiti6.0.0-bpmn20-web是我搭建好的Web流程设计器环境，可以直接clone项目到本地启动，就可以在线设计工作流引擎流程图</p><blockquote><p>git clone <a href="https://github.com/gaoshengnan/Activiti6.0.0-bpmn20-web.git" target="_blank" rel="noopener">https://github.com/gaoshengnan/Activiti6.0.0-bpmn20-web.git</a></p></blockquote><p>拉下代码之后打开Terminal，启动Tomcat</p><p><div align="left"><img src="/img/activitiWebBpmn/startTomcat.png" height="180" width="500"></div></p><blockquote><p>访问<a href="http://localhost:8080/activiti-admin" target="_blank" rel="noopener">http://localhost:8080/activiti-admin</a>，用户名 username：admin   |  密码 password：admin</p></blockquote><p><div align="left"><img src="/img/activitiWebBpmn/loginAdmin.png" height="300" width="600"></div></p><blockquote><p>这里默认的Server port是9999，修改端口号为8080，设置app的密码为test</p></blockquote><p><div align="left"><img src="/img/activitiWebBpmn/updatePortPass.png" height="350" width="530"></div></p><blockquote><p>并点击【Check Activiti Rest endpoint】测试一下</p></blockquote><p><div align="left"><img src="/img/activitiWebBpmn/check.png" height="240" width="600"></div></p><blockquote><p>然后访问<a href="http://localhost:8080/activiti-app" target="_blank" rel="noopener">http://localhost:8080/activiti-app</a>，用户名 username：admin | 密码 password：test</p></blockquote><p><div align="left"><img src="/img/activitiWebBpmn/loginApp.png" height="370" width="750"></div></p><blockquote><p>现在可以开始设计流程图了～～～</p></blockquote><p><div align="left"><img src="/img/activitiWebBpmn/appMain.png" height="230" width="800"></div></p><p><div align="left"><img src="/img/activitiWebBpmn/bpmn.png" height="460" width="950"></div></p><h3 id="默认h2数据库改成mysql数据库"><a href="#默认h2数据库改成mysql数据库" class="headerlink" title="默认h2数据库改成mysql数据库"></a>默认h2数据库改成mysql数据库</h3><p>activiti默认配置h2的数据库，当重新启动Tomcat，设计好的流程图就被清空，可以配置成自己的mysql数据库，修改这个路径下的配置：</p><blockquote><p>apache-tomcat-8.0.53/webapps/activiti-app/WEB-INF/classes/META-INF/activiti-app/activiti-app.properties</p></blockquote><p><div align="left"><img src="/img/activitiWebBpmn/data.png" height="300" width="550"></div></p><blockquote><p>注意：切换时如果出现问题可以查看这片故障排查记录<a href="http://seina.top/2019/01/17/activitiWebH2ToMysql/">记录ActivitiWeb流程设计器从h2转成mysql线上故障排查</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、流程设计器环境搭建步骤&quot;&gt;&lt;a href=&quot;#一、流程设计器环境搭建步骤&quot; class=&quot;headerlink&quot; title=&quot;一、流程设计器环境搭建步骤&quot;&gt;&lt;/a&gt;一、流程设计器环境搭建步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先在&lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="Activiti工作流" scheme="http://seina.top/categories/Activiti%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
    
      <category term="Activiti" scheme="http://seina.top/tags/Activiti/"/>
    
  </entry>
  
  <entry>
    <title>记录ActivitiWeb流程设计器从h2转成mysql线上故障排查</title>
    <link href="http://seina.top/2019/01/17/activitiWebH2ToMysql/"/>
    <id>http://seina.top/2019/01/17/activitiWebH2ToMysql/</id>
    <published>2019-01-17T12:56:16.000Z</published>
    <updated>2019-01-17T15:23:16.189Z</updated>
    
    <content type="html"><![CDATA[<h3 id="故障场景描述"><a href="#故障场景描述" class="headerlink" title="故障场景描述"></a>故障场景描述</h3><p>首先我要做的事情是用自己集成好的<a href="https://github.com/gaoshengnan/Activiti6.0.0-bpmn20-web" target="_blank" rel="noopener">Activiti在线web流程设计器</a>画工作流流程图，但是限于Activiti默认配置是h2数据库，在Tomcat重新重启之后，画好的流程配置文件数据就没了。于是准备换成mysql的数据库，便可以将流程配置文件持久落库。</p><p>实际上我集成好的流程设计器是将Activiti6.0.0的war包activiti-app和activiti-admin放在Tomcat的webapps下，然后启动tomcat，访问<a href="http://localhost:8080/activiti-app" target="_blank" rel="noopener">http://localhost:8080/activiti-app</a> 登录之后开始设计工作流流程图。</p><h4 id="对应操作"><a href="#对应操作" class="headerlink" title="对应操作"></a>对应操作</h4><p>修改activiti-app的数据库，配置文件对应路径如下：<br>Activiti6.0.0-bpmn20-web/apache-tomcat-8.0.53/webapps/activiti-app/WEB-INF/classes/META-INF/activiti-app/activiti-app.properties </p><blockquote><p>原来的h2数据库配置</p></blockquote><p><div align="left"><img src="/img/activitiWebH2ToMysql/3.png" height="300" width="600"></div></p><blockquote><p>改成mysql配置</p></blockquote><p><div align="left"><img src="/img/activitiWebH2ToMysql/1.png" height="300" width="600"></div></p><p>看似简单的操作，在我改好之后，重新启动Tomcat，访问<a href="http://localhost:8080/activiti-app" target="_blank" rel="noopener">http://localhost:8080/activiti-app</a> 发现报错404，明显activiti-app没有成功部署到服务器上。</p><h3 id="开始排查问题"><a href="#开始排查问题" class="headerlink" title="开始排查问题"></a>开始排查问题</h3><p>接下来查看服务器的logs/catalina.out日志，发现异常信息：</p><p><div align="left"><img src="/img/activitiWebH2ToMysql/2.png" height="140" width="850"></div></p><p>原来activiti-app在tomcat启动的时候，会创建一个表，其中表的字段如图中蓝色框框里的ID_VARCHAR（255）指定为PRIMARY_KEY(ID_)主键，导致mysql报错：Index column size too large. The maximum column size is 767 bytes，意思是索引字段太长，限制长度为767个字节。</p><p>然后一脸懵逼的把这个异常信息粘到百度，发现mysql5.6版本有重要的Innodb参数innodb_large_prefix全局动态变量，在5.6中默认是关闭的（5.7默认开启），该参数表示Innodb为字段创建索引时，限制的字节长度，关闭时，字节长度大于767则会报warnings，开启时则会报错，创建不成功.</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>然后查看了一下数据库mysql的字符集编码：</p><blockquote><p>show variables like ‘character_set_database’;</p></blockquote><p><div align="left"><img src="/img/activitiWebH2ToMysql/4.png" height="170" width="500"></div></p><p>发现是utf8mb4，mysql从5.5.3之后增加了utfmb4的编码，专门用来兼容4字节的unicode，好在utf8mb4是utf8的超集，除了将编码改为utf8mb4外不需要做其他转换。而在utf8中，中文一般占3个字节。所以上面的ID_主键索引设置成255，如果是utfmb4，大约1020，超过了767个字节，所以换成是utf8，问题就解决了</p><blockquote><p>alter database activiti character set utf8;</p></blockquote><p><div align="left"><img src="/img/activitiWebH2ToMysql/5.png" height="170" width="500"></div></p><p>最后重新启动Tomcat服务，就可以访问activiti-app页面开始设计流程图了～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;故障场景描述&quot;&gt;&lt;a href=&quot;#故障场景描述&quot; class=&quot;headerlink&quot; title=&quot;故障场景描述&quot;&gt;&lt;/a&gt;故障场景描述&lt;/h3&gt;&lt;p&gt;首先我要做的事情是用自己集成好的&lt;a href=&quot;https://github.com/gaoshengna
      
    
    </summary>
    
      <category term="Activiti工作流" scheme="http://seina.top/categories/Activiti%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
    
      <category term="Activiti" scheme="http://seina.top/tags/Activiti/"/>
    
      <category term="Mysql" scheme="http://seina.top/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>链表 - 判断一个链表是否有环以及求出环入口点</title>
    <link href="http://seina.top/2019/01/14/linkedListCycle/"/>
    <id>http://seina.top/2019/01/14/linkedListCycle/</id>
    <published>2019-01-14T15:18:00.000Z</published>
    <updated>2019-01-15T13:03:01.596Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、LeetCode141"><a href="#一、LeetCode141" class="headerlink" title="一、LeetCode141"></a>一、LeetCode141</h3><blockquote><ul><li>英文版：<a href="https://leetcode.com/problems/linked-list-cycle/" target="_blank" rel="noopener">https://leetcode.com/problems/linked-list-cycle/</a></li><li>中文版：<a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-cycle/</a></li><li>答案链接：<a href="https://github.com/gaoshengnan/LeetCode/blob/master/src/main/java/linkedlist/linkedListCycle/LinkedListCycle.java" target="_blank" rel="noopener">https://github.com/gaoshengnan/LeetCode/blob/master/src/main/java/linkedlist/linkedListCycle/LinkedListCycle.java</a></li></ul></blockquote><h3 id="二、题意解析："><a href="#二、题意解析：" class="headerlink" title="二、题意解析："></a>二、题意解析：</h3><p>1、首先如果一个单链表没有环，最后一个结点指向null，如下图1所示：</p><div align="center"><img src="/img/linkedListCycle/1.png" height="130" width="700"></div><br>2、但是如果一个链表有环，以下是我能想到有环的三种情况，如下图2所示：<br><br><div align="center"><img src="/img/linkedListCycle/2.png" height="330" width="700"></div><h3 id="三、简单描述前两种解法"><a href="#三、简单描述前两种解法" class="headerlink" title="三、简单描述前两种解法"></a>三、简单描述前两种解法</h3><p>第一种，从上图1和图2可以看出，有环和无环的区别是最后一个结点是否指向null，如果指向null，表示无环，如果没有指向null，则有环</p><p>第二种，循环遍历链表，每经过一个结点，将结点的next指针存入Set集合，如果发现有重复的，则有环，否则无环</p><h3 id="四、详细讲解最后一种解法"><a href="#四、详细讲解最后一种解法" class="headerlink" title="四、详细讲解最后一种解法"></a>四、详细讲解最后一种解法</h3><p>第三种，使用快慢指针来解答，快指针每次循环走两步，慢指针每次循环走一步，如果链表无环，像图1一样，是一条直线，快指针和慢指针同时出发，快指针又比慢指针走的快两倍，那慢指针和快指针永远都不会相遇<br>但是像图2，链表中有环，意味着快指针走着走着，会拐弯，进入环里，就意味着有机会和慢指针相遇。</p><h4 id="有环链表-示例1"><a href="#有环链表-示例1" class="headerlink" title="有环链表-示例1"></a>有环链表-示例1</h4><p>图2中第一个简单的有环链表，蓝色圆圈fast代表快指针，红色小心心low代表慢指针，如图3所示：</p><div align="center"><img src="/img/linkedListCycle/3.png" height="250" width="700"></div><blockquote><ul><li>第1步，fast和low从A结点同时出发，fast每次走两个结点，low每次走一个结点</li><li>第2步，fast经过A-B-C，走到C；low经过A-B，走到B</li><li>第3步，fast经过C-A-B，走到B；low经过B-C，走到C<br>然后fast继续经过B-C-A，low继续经过C-A，所以两个指针在A结点相遇，其中fast指针的路线A-B-C-A-B-C-A，low指针的路线A-B-C-A。</li></ul></blockquote><h4 id="有环链表-示例2"><a href="#有环链表-示例2" class="headerlink" title="有环链表-示例2"></a>有环链表-示例2</h4><p>看图2中的第二个有环的链表，如下图4所示：(此处不再详细画出)</p><div align="center"><img src="/img/linkedListCycle/4.png" height="350" width="700"></div><p>由上图4可以看出，fast指针在E结点处拐弯，两次经过E结点拐弯，最终在I结点和low相遇。</p><h4 id="有环链表-示例3"><a href="#有环链表-示例3" class="headerlink" title="有环链表-示例3"></a>有环链表-示例3</h4><p>图2中第三个有环的链表，如下图5所示：</p><div align="center"><img src="/img/linkedListCycle/5.png" height="330" width="600"></div><h3 id="五、扩展LeetCode142"><a href="#五、扩展LeetCode142" class="headerlink" title="五、扩展LeetCode142"></a>五、扩展LeetCode142</h3><blockquote><ul><li>英文版：<a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/linked-list-cycle-ii/</a></li><li>中文版：<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-cycle-ii/</a></li></ul></blockquote><h4 id="题意解析：如果链表有环，返回该环的入口结点，如下图所示："><a href="#题意解析：如果链表有环，返回该环的入口结点，如下图所示：" class="headerlink" title="题意解析：如果链表有环，返回该环的入口结点，如下图所示："></a>题意解析：如果链表有环，返回该环的入口结点，如下图所示：</h4><div align="center"><img src="/img/linkedListCycle/6.png" height="230" width="600"></div><p>上面图中fast指针的low指针同时从A结点出发，fast每次走两步，low每次走一步，在G结点相遇，发现链表有环，不难观察出fast和low的路线如下图：</p><div align="center"><img src="/img/linkedListCycle/7.png" height="250" width="600"></div><p>然后假设起始结点A到环入口点C的距离是x，入口点C到相遇点的距离是y，相遇点到入口点的距离是z，所以得出以下结论：</p><div align="center"><img src="/img/linkedListCycle/8.png" height="200" width="600"></div><p>所以解题思路是当发现快指针fast和慢指针low相遇之后，让fast指针从起始结点出发，再次相遇的点就是环的入口点。</p><blockquote><ul><li>答案链接：<a href="https://github.com/gaoshengnan/LeetCode/blob/master/src/main/java/linkedlist/linkedListCycle/LinkedListCycle.java" target="_blank" rel="noopener">https://github.com/gaoshengnan/LeetCode/blob/master/src/main/java/linkedlist/linkedListCycle/LinkedListCycle.java</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、LeetCode141&quot;&gt;&lt;a href=&quot;#一、LeetCode141&quot; class=&quot;headerlink&quot; title=&quot;一、LeetCode141&quot;&gt;&lt;/a&gt;一、LeetCode141&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;英文版：&lt;a 
      
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://seina.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构和算法" scheme="http://seina.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="链表" scheme="http://seina.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="LeetCode" scheme="http://seina.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>极客时间海报礼券分享</title>
    <link href="http://seina.top/2019/01/02/geekTime/"/>
    <id>http://seina.top/2019/01/02/geekTime/</id>
    <published>2019-01-02T11:58:35.000Z</published>
    <updated>2019-01-17T13:04:07.763Z</updated>
    
    <content type="html"><![CDATA[<font color="#7B68EE" size="4.5" face="黑体">扫描我分享的课程专栏海报二维码，在买专栏的时候就能获取立减券，金额不定～</font><h2 id="一、10x程序员工作法"><a href="#一、10x程序员工作法" class="headerlink" title="一、10x程序员工作法"></a>一、10x程序员工作法</h2><h5 id="优秀程序员的开发效率是普通程序员的10倍。"><a href="#优秀程序员的开发效率是普通程序员的10倍。" class="headerlink" title="优秀程序员的开发效率是普通程序员的10倍。"></a>优秀程序员的开发效率是普通程序员的10倍。</h5><blockquote><p><div align="center"><img src="/img/geekTime/10xProgrammer.png" height="550" width="380"></div></p></blockquote><h2 id="二、技术管理实战36讲"><a href="#二、技术管理实战36讲" class="headerlink" title="二、技术管理实战36讲"></a>二、技术管理实战36讲</h2><h5 id="当你学会用“带团队”的思路工作和生活之后，无论你是否拥有”管理者”的头衔，你都将成为身边人事实上的领袖。"><a href="#当你学会用“带团队”的思路工作和生活之后，无论你是否拥有”管理者”的头衔，你都将成为身边人事实上的领袖。" class="headerlink" title="当你学会用“带团队”的思路工作和生活之后，无论你是否拥有”管理者”的头衔，你都将成为身边人事实上的领袖。"></a>当你学会用“带团队”的思路工作和生活之后，无论你是否拥有”管理者”的头衔，你都将成为身边人事实上的领袖。</h5><blockquote><p><div align="center"><img src="/img/geekTime/technicalManagement.png" height="550" width="380"></div></p></blockquote><h2 id="三、从0开始学微服务"><a href="#三、从0开始学微服务" class="headerlink" title="三、从0开始学微服务"></a>三、从0开始学微服务</h2><h5 id="微服务是当下最火热的后端架构之一。不管你是一个什么级别的程序员，服务化都是你迟早会遇到的难题。"><a href="#微服务是当下最火热的后端架构之一。不管你是一个什么级别的程序员，服务化都是你迟早会遇到的难题。" class="headerlink" title="微服务是当下最火热的后端架构之一。不管你是一个什么级别的程序员，服务化都是你迟早会遇到的难题。"></a>微服务是当下最火热的后端架构之一。不管你是一个什么级别的程序员，服务化都是你迟早会遇到的难题。</h5><blockquote><p><div align="center"><img src="/img/geekTime/microService.png" height="550" width="380"></div></p></blockquote><h2 id="四、趣谈网络协议"><a href="#四、趣谈网络协议" class="headerlink" title="四、趣谈网络协议"></a>四、趣谈网络协议</h2><h5 id="网络协议是每个程序员的必修课，但是彻底掌握并应用网络协议知识却并非易事，比如常见的HTTP、TCP-IP。"><a href="#网络协议是每个程序员的必修课，但是彻底掌握并应用网络协议知识却并非易事，比如常见的HTTP、TCP-IP。" class="headerlink" title="网络协议是每个程序员的必修课，但是彻底掌握并应用网络协议知识却并非易事，比如常见的HTTP、TCP/IP。"></a>网络协议是每个程序员的必修课，但是彻底掌握并应用网络协议知识却并非易事，比如常见的HTTP、TCP/IP。</h5><blockquote><p><div align="center"><img src="/img/geekTime/networkProtocl.png" height="550" width="380"></div></p></blockquote><h2 id="五、Java核心技术36讲"><a href="#五、Java核心技术36讲" class="headerlink" title="五、Java核心技术36讲"></a>五、Java核心技术36讲</h2><h5 id="将基础很重要，现如今不需要那些”差不多”或者”还行”的代码，而是需要达到一定水准的高质量设计与实现。"><a href="#将基础很重要，现如今不需要那些”差不多”或者”还行”的代码，而是需要达到一定水准的高质量设计与实现。" class="headerlink" title="将基础很重要，现如今不需要那些”差不多”或者”还行”的代码，而是需要达到一定水准的高质量设计与实现。"></a>将基础很重要，现如今不需要那些”差不多”或者”还行”的代码，而是需要达到一定水准的高质量设计与实现。</h5><blockquote><p><div align="center"><img src="/img/geekTime/java.png" height="550" width="380"></div></p></blockquote><h2 id="六、深入拆解Java虚拟机"><a href="#六、深入拆解Java虚拟机" class="headerlink" title="六、深入拆解Java虚拟机"></a>六、深入拆解Java虚拟机</h2><h5 id="Oracle高级研究员来解答你对Java的种种疑虑，达到知其然也要知其所以然。"><a href="#Oracle高级研究员来解答你对Java的种种疑虑，达到知其然也要知其所以然。" class="headerlink" title="Oracle高级研究员来解答你对Java的种种疑虑，达到知其然也要知其所以然。"></a>Oracle高级研究员来解答你对Java的种种疑虑，达到知其然也要知其所以然。</h5><blockquote><p><div align="center"><img src="/img/geekTime/jvm.png" height="550" width="380"></div></p></blockquote><h2 id="七、数据结构和算法之美"><a href="#七、数据结构和算法之美" class="headerlink" title="七、数据结构和算法之美"></a>七、数据结构和算法之美</h2><h5 id="一个让你能真正受用的数据结构和算法课程，希望给你指明一个简洁、高效的学习路径，并教你一个学习基础知识的通用方法。"><a href="#一个让你能真正受用的数据结构和算法课程，希望给你指明一个简洁、高效的学习路径，并教你一个学习基础知识的通用方法。" class="headerlink" title="一个让你能真正受用的数据结构和算法课程，希望给你指明一个简洁、高效的学习路径，并教你一个学习基础知识的通用方法。"></a>一个让你能真正受用的数据结构和算法课程，希望给你指明一个简洁、高效的学习路径，并教你一个学习基础知识的通用方法。</h5><blockquote><p><div align="center"><img src="/img/geekTime/dataStructureAndAlgorithms.png" height="550" width="380"></div></p></blockquote><h2 id="八、算法面试通关40讲"><a href="#八、算法面试通关40讲" class="headerlink" title="八、算法面试通关40讲"></a>八、算法面试通关40讲</h2><h5 id="前Facebook工程师带你刷算法题，覃超老师的课程真的超级超级棒，老师很帅，满满的干货带你挑战算法。"><a href="#前Facebook工程师带你刷算法题，覃超老师的课程真的超级超级棒，老师很帅，满满的干货带你挑战算法。" class="headerlink" title="前Facebook工程师带你刷算法题，覃超老师的课程真的超级超级棒，老师很帅，满满的干货带你挑战算法。"></a>前Facebook工程师带你刷算法题，覃超老师的课程真的超级超级棒，老师很帅，满满的干货带你挑战算法。</h5><blockquote><p><div align="center"><img src="/img/geekTime/algorithmsInterview.png" height="550" width="380"></div></p></blockquote><blockquote><p>最后，加入极客时间专栏学习已经有一段时间，从早上洗漱，化妆到上班地铁上，以及从手机里面的网易云音乐切换到到极客时间专栏课程，利用琐碎时间充实自己，感觉收获颇多。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font color=&quot;#7B68EE&quot; size=&quot;4.5&quot; face=&quot;黑体&quot;&gt;扫描我分享的课程专栏海报二维码，在买专栏的时候就能获取立减券，金额不定～&lt;/font&gt;

&lt;h2 id=&quot;一、10x程序员工作法&quot;&gt;&lt;a href=&quot;#一、10x程序员工作法&quot; class=&quot;h
      
    
    </summary>
    
      <category term="极客时间学习" scheme="http://seina.top/categories/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="http://seina.top/tags/Java/"/>
    
      <category term="极客时间" scheme="http://seina.top/tags/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/"/>
    
      <category term="数据结构和算法" scheme="http://seina.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
      <category term="网络协议" scheme="http://seina.top/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="Jvm" scheme="http://seina.top/tags/Jvm/"/>
    
      <category term="微服务架构" scheme="http://seina.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>简而易懂的代理模式</title>
    <link href="http://seina.top/2018/11/26/proxy/"/>
    <id>http://seina.top/2018/11/26/proxy/</id>
    <published>2018-11-26T13:39:25.000Z</published>
    <updated>2018-11-26T15:05:45.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="故事场景"><a href="#故事场景" class="headerlink" title="故事场景"></a>故事场景</h3><p>有一个小仙女叫seina，他有一个追求者叫pursuit，和她的好朋友daili，pursuit准备了chocolate和doll，请daili代送给seina，此刻注意，seina并不认识pursuit。</p><h4 id="错误代码1-—-没有代理的代码"><a href="#错误代码1-—-没有代理的代码" class="headerlink" title="错误代码1 — 没有代理的代码"></a>错误代码1 — 没有代理的代码</h4><p>呃…为什么要写错误的代码，因为只有从错误过渡到正确的艰辛过程，才会知道正确的重要性</p><p>首先有个小仙女，构造器注入她的名字<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Fairy:小仙女seina</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fairy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fairy</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后有一个追求者，有个属性是小仙女，构造器注入小仙女，表示追求哪个小仙女的追求者，以及给哪个小仙女送巧克力和洋娃娃<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Pursuit:追求者</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pursuit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Fairy mm = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Pursuit(Fairy mm) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mm = mm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">giveDolls</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"送"</span>+mm.getName()+<span class="string">"洋娃娃"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">giveChocolate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"送"</span>+mm.getName()+<span class="string">"巧克力"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代理类Proxy和追求者功能类似<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Proxy:代理类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Fairy mm = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    Proxy(Fairy mm) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mm = mm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">giveDolls</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"送"</span>+mm.getName()+<span class="string">"洋娃娃"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">giveChocolate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"送"</span>+mm.getName()+<span class="string">"巧克力"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端调用代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Fairy seina = <span class="keyword">new</span> Fairy(<span class="string">"seina"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 不使用代理</span></span><br><span class="line"><span class="comment">         * seina并不认识这个追求者，所以此段不符合实际</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Pursuit pursuit = <span class="keyword">new</span> Pursuit(seina);</span><br><span class="line">        pursuit.giveChocolate();</span><br><span class="line">        pursuit.giveDolls();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用代理</span></span><br><span class="line"><span class="comment">         * 把追求者换成代理类daili，也不合理，因为礼物是追求者准备的...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Proxy daili = <span class="keyword">new</span> Proxy(seina);</span><br><span class="line">        daili.giveChocolate();</span><br><span class="line">        daili.giveDolls();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>写到这里，我们来想一下，不使用代理的时候，seina并不认识pursuit，直接让pursuit送礼物不太合理。当有了代理类的时候，让代理类来送礼物，却把真正准备礼物的pursuit给弄丢了…<br>仔细观察，Pursuit和Proxy都有送礼的方法，只不过Proxy送的礼物是Pursuit准备的，实质上也是Pursuit送的，嗯，这才合理。</p><h4 id="符合实际的代码"><a href="#符合实际的代码" class="headerlink" title="符合实际的代码"></a>符合实际的代码</h4><p>将送礼物提取成一个接口，包含送礼物方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* IGiveGif:送礼物接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IGiveGift</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">giveDolls</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">giveChocolate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后让追求者去实现送礼物接口，可以理解成追求者是那个具体准备礼物的人<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Pursuit:追求者</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pursuit</span> <span class="keyword">implements</span> <span class="title">IGiveGift</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Fairy mm = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一个追求某个学妹的追求者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pursuit</span><span class="params">(Fairy mm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mm = mm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveDolls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"送"</span>+mm.getName()+<span class="string">"洋娃娃"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveChocolate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"送"</span>+mm.getName()+<span class="string">"巧克力"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代理类也实现送礼物接口，在代理中构造追求者，并调用追求者送礼物的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Proxy:代理类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">IGiveGift</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Pursuit pursuit = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在代理的构造器里也构造了一个追求者，为了让他去准备礼物-，-哈哈哈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Fairy mm)</span> </span>&#123;</span><br><span class="line">        pursuit = <span class="keyword">new</span> Pursuit(mm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveDolls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在实现中调用追求者的方式，实质上代理只是帮忙代送礼物，真正准备礼物的还是追求者</span></span><br><span class="line">        pursuit.giveDolls();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveChocolate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pursuit.giveChocolate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端调用代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Fairy seina = <span class="keyword">new</span> Fairy(<span class="string">"seina"</span>);</span><br><span class="line"></span><br><span class="line">        Proxy daili = <span class="keyword">new</span> Proxy(seina);</span><br><span class="line"></span><br><span class="line">        daili.giveChocolate();</span><br><span class="line"></span><br><span class="line">        daili.giveDolls();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事实上，seina不认识他的追求者，但却可以通过代理得到追求者的礼物，可能收到礼物的时候，如果代理不告诉他是谁准备的礼物，seina也不知道到底是谁送给她的</p><h4 id="官方这样讲代理模式"><a href="#官方这样讲代理模式" class="headerlink" title="官方这样讲代理模式"></a>官方这样讲代理模式</h4><blockquote><p>代理模式(Proxy): 为对象提供一种代理以控制对这个对象的访问。</p></blockquote><h5 id="代理模式的应用场合一般分为以下几种："><a href="#代理模式的应用场合一般分为以下几种：" class="headerlink" title="代理模式的应用场合一般分为以下几种："></a>代理模式的应用场合一般分为以下几种：</h5><ol><li>远程代理：也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。例如，客户端程序调用代理解决远程访问的问题。</li><li>虚拟代理：是根据需要创建开销很大的对象。通过它来存放实例化很长时间的真实对象，这样就可以达到性能的最优化，比如打开HTML网页时，里面可能有很大的图片的文字，但是还可以很快打开，此时看到的是一张一张下载后才能看到，那些未打开的图片框，就是使用虚拟代理来替代了真实的图片，此时代理存储了真实的图片的路径和尺寸。</li><li>安全代理：用来控制真实对象访问时的权限，一般用于对象有不同权限的时候。</li><li>智能指引：是指当调用真实对象的时候，代理处理另外一些事情。如计算真实对象的引用次数，这样当该对象没有引用时，可以自动释放它，或当第一次引用一个持久对象时，将它装入内存，或在访问一个实际对象前，检查是否已经锁定它，以确保其他对象不能改变它，它们都是通过代理在访问一个对象时附加一些内务处理。</li></ol><blockquote><p>代理模式其实就是在访问对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途</p></blockquote><p>还有查看其他设计模式请移步github：<a href="https://github.com/gaoshengnan/designPattern" target="_blank" rel="noopener">https://github.com/gaoshengnan/designPattern</a></p><ul><li><ul><li>注：代码风格有点丑，这片先这样吧，等我找到怎么修改这个黑暗的背景再来把它改掉。。。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;故事场景&quot;&gt;&lt;a href=&quot;#故事场景&quot; class=&quot;headerlink&quot; title=&quot;故事场景&quot;&gt;&lt;/a&gt;故事场景&lt;/h3&gt;&lt;p&gt;有一个小仙女叫seina，他有一个追求者叫pursuit，和她的好朋友daili，pursuit准备了chocolate和d
      
    
    </summary>
    
      <category term="大战设计模式" scheme="http://seina.top/categories/%E5%A4%A7%E6%88%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://seina.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>微服务系统中故障种类及处理手段</title>
    <link href="http://seina.top/2018/11/16/faultHandling/"/>
    <id>http://seina.top/2018/11/16/faultHandling/</id>
    <published>2018-11-16T08:04:51.000Z</published>
    <updated>2018-11-16T10:04:20.064Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、常见三种故障："><a href="#一、常见三种故障：" class="headerlink" title="一、常见三种故障："></a>一、常见三种故障：</h3><blockquote><ul><li>单机故障：集群中的个别机器出现故障，导致调用到故障机器的请求都失败</li><li>集群故障：因为微服务系统一般都是集群部署的，根据业务量的大小而定，集群规模从几台到上万台都有可能。一旦某些代码出现bug可能整个集群都会发生故障，导致不能对外提供服务</li><li>单IDC故障：某个IDC的光缆因为道路施工被挖断，导致整个IDC脱网</li></ul></blockquote><h3 id="二、集群故障处理-—-限流和降级"><a href="#二、集群故障处理-—-限流和降级" class="headerlink" title="二、集群故障处理 — 限流和降级"></a>二、集群故障处理 — 限流和降级</h3><h5 id="产生的原因主要有两种"><a href="#产生的原因主要有两种" class="headerlink" title="产生的原因主要有两种"></a>产生的原因主要有两种</h5><blockquote><ol><li>代码bug所致，比如某一段Java代码不断地分配大对象，但没有及时回收导致JVM OOM退出</li><li>突发的流量冲击，超出了系统的最大承载能力，比如双11，零点一瞬间涌入大量流量</li></ol></blockquote><h5 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h5><p>限流就是指限制流量，在实际项目中可以使用QPS即每秒请求量和工作线程数这两个指标来衡量服务的请求量，不同服务的QPS响应的快慢不同，系统能够承载的QPS相差很大，因此一般选择工作线程数来作为限流的指标.给系统设置一个总的最大工作线程数以及单个服务的最大工作线程数，这样的话，无论系统的总请求量过大导致整体工作线程数量达到最大工作线程数，还是个别服务的请求量超过单个服务的最大工作线程数，都会被限流，以起到保护整个系统的作用。</p><p>系统能够承载的流量根据集群规模的大小是固定的，可以称之为整个系统的最大容量，当真实流量超过了系统的最大流量后，就会导致系统响应变慢，服务调用出现大量超时，反映给用户的感觉就是卡顿、无响应。</p><p>除此之外，通常一个微服务系统中会同时提供多个服务，每个服务在同一时刻的请求量也是不同，如果系统中某个服务的请求量突增，占用了系统中大部分资源，导致其他服务没有资源可用。</p><h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><blockquote><ol><li>根据系统的最大容量，给系统设置一个阈值，超过这个阈值的请求会自动抛弃，这样的化才可以最大限度地保证系统提供的服务正常。</li><li>针对系统中的每个服务的请求量也设置一个阈值，超过这个阈值的请求也要被自动放弃，这样也不至于一个服务影响了其他所有的服务</li></ol></blockquote><h5 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h5><p>降级就是通过停止系统中的某些功能，来保护系统的整体可用性，是一种被动防御的措施，一般是在系统出现故障后所采取的一种止损措施。比如我的笔记本同时接两个显示屏和电源，最近异常的很热，为了保证电脑不会热的爆炸，为了保证电脑的高可用性，我可以把电源降级，直接拔掉电源，或者拔掉一个显示屏等。</p><h6 id="降级的分类："><a href="#降级的分类：" class="headerlink" title="降级的分类："></a>降级的分类：</h6><blockquote><ul><li>一级降级：一级降级是对业务影响最小的降级，在故障的情况下，首先执行一级降级，所以一级降级也可以设置成自动降级，不需要人为干预</li><li>二级降级：二级降级是对业务有一定影响的降级，在故障的情况下，如果一级降级起不到多大作用的时候，可以人为采取措施，执行二级降级</li><li>三级降级：三级降级是对业务有较大影响的降级，这种降级要么是对商业收入有重大影响，要么是对用户体验有重大影响，所以操作起来要非常谨慎，不在最后时刻一般不予采用。</li></ul></blockquote><p>降级的一般通过开关来实现。具体来讲，在系统运行的内存中开辟出一块区域，专门用于存储开关的状态，并且需要监听某个端口，通过这个端口可以向系统下发命令，来改变内存中开关的状态。</p><h6 id="开关一般用在两种地方："><a href="#开关一般用在两种地方：" class="headerlink" title="开关一般用在两种地方："></a>开关一般用在两种地方：</h6><blockquote><ol><li>新增的业务逻辑：新增的业务逻辑相对来说不成熟，往往具备一定的风险，所以需要加开关来控制新业务逻辑是否执行</li><li>依赖的服务或资源：因为依赖的服务或者资源不总是可靠的，所以最好是有开关能够控制是否对依赖服务或资源发起调用，来保证即使依赖出现问题，也能通过降级来避免影响</li></ol></blockquote><h3 id="单IDC故障"><a href="#单IDC故障" class="headerlink" title="单IDC故障"></a>单IDC故障</h3><p>在现实情况下，整个IDC脱网的事情时有发生，比如机房着火、光缆被挖断等，如果业务全部部署在这个IDC，那就完全不可访问了。国内采取多IDC部署，当一个IDC发生故障之后，可以把原来访问故障 IDC 的流量切换到正常的 IDC，来保证业务的正常访问</p><blockquote><ul><li>同城双活：一个城市的两个 IDC 内部署</li><li>异地多活：一般是在两个城市的两个 IDC 内部署</li><li>三地五中心：支付宝这种金融级别的使用，成本显然高比两个 IDC 要高得多，但可用性的保障要更高</li></ul></blockquote><h6 id="那么流量怎么切换呢，一般分为两种："><a href="#那么流量怎么切换呢，一般分为两种：" class="headerlink" title="那么流量怎么切换呢，一般分为两种："></a>那么流量怎么切换呢，一般分为两种：</h6><ol><li><p>基于 DNS 解析的流量切换: 基于 DNS 解析流量的切换，一般是通过把请求访问域名解析的 VIP 从一个 IDC 切换到另外一个 IDC。比如访问<a href="www.weibo.com">www.weibo.com</a>， 正常情况下北方用户会解析到联通机房的 VIP，南方用户会解析到电信机房的 VIP，如果联通机房发生故障的话，会把北方用户访问也解析到电信机房的 VIP，只不过此时网络延迟可能会变长。</p></li><li><p>基于 RPC 分组的流量切换: 对于一个服务来说，如果是部署在多个 IDC 的话，一般每个 IDC 就是一个分组。假如一个 IDC 出现故障，那么原先路由到这个分组的流量，就可以通过向配置中心下发命令，把原先路由到这个分组的流量全部切换到别的分组，这样的话就可以切换故障IDC的流量。</p></li></ol><h3 id="三、单机故障"><a href="#三、单机故障" class="headerlink" title="三、单机故障"></a>三、单机故障</h3><p>在上万台机器的规模中出现单机故障是很常见的，这个时候只靠运维人肉处理显然不可行，所以就要求有某种手段来自动处理单机故障。</p><p>处理单机故障一个有效的办法就是自动重启。具体来讲，你可以设置一个阈值，比如以某个接口的平均耗时为准，当监控单机上某个接口的平均耗时超过一定阈值时，就认为这台机器有问题，这个时候就需要把有问题的机器从线上集群中摘除掉，然后在重启服务后，重新加入到集群中。</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><blockquote><ol><li>防止网络抖动造成的接口超时从而触发自动重：在收集单机接口耗时数据时，多采集几个点，比如每 10s 采集一个点，采集 5 个点，当 5 个点中有超过 3 个点的数据都超过设定的阈值范围，才认为是真正的单机问题，这时会触发自动重启策略。</li><li>短时间重启单机过多导致服务池可用节点太少：设置一个可重启的单机数量占整个集群的最大比例，一般这个比例不要超过 10%，因为正常情况下，不大可能有超过 10% 的单机都出现故障。</li></ol></blockquote><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>微服务可能出现的三种故障：集群故障，单机故障，单IDC故障，以及响应的解决方案：降级，限流，流量切换以及自动重启。在遇到实际故障时，往往多个手段是并用的，比如出现单IDC故障，首先要快速切换到正常的IDC，但此时可能正常的IDC并不足以支撑两个IDC的流量，所以要降级部分功能，保证正常的IDC顺利的支撑切换过来的流量。</p><p>而且尽量让故障处理自动化，这样可以大大减少故障影响的时间。因为一旦需要引入人为干预，往往故障处理的时间都得是10分钟以上，这对大部分用户敏感型业务的影响是巨大的，如果能做到自动化处理，可以将故障处理的时间降低到 1 分钟以内甚至秒级别，这样的话对于用户的影响最小。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、常见三种故障：&quot;&gt;&lt;a href=&quot;#一、常见三种故障：&quot; class=&quot;headerlink&quot; title=&quot;一、常见三种故障：&quot;&gt;&lt;/a&gt;一、常见三种故障：&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;单机故障：集群中的个别机器出现故障，导致调用到
      
    
    </summary>
    
      <category term="初识微服务" scheme="http://seina.top/categories/%E5%88%9D%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务架构" scheme="http://seina.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
      <category term="分布式系统" scheme="http://seina.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>如何快速的理解什么是微服务？</title>
    <link href="http://seina.top/2018/11/11/microservice/"/>
    <id>http://seina.top/2018/11/11/microservice/</id>
    <published>2018-11-11T14:48:37.000Z</published>
    <updated>2019-07-01T07:42:20.325Z</updated>
    
    <content type="html"><![CDATA[<h3 id="维基百科定义微服务"><a href="#维基百科定义微服务" class="headerlink" title="维基百科定义微服务"></a>维基百科定义微服务</h3><blockquote><p>维基百科定义微服务：微服务的概念最早实在 2014 年由 Martin Fowler 和 James Lewis 共同提出，他们定义了微服务是由单一应用程序构成的小服务，拥有自己的进程和轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用 HTTP API 通讯。同时。服务会使用最小规模的集中管理（如 Docker）技术，服务可以用不同的编程语言和数据库等。</p></blockquote><p>好吧，可能看完了上面一段话反而觉得更难理解了，老外说的话一向都是这么生涩难懂，其实在我看来，要想深刻理解微服务的价值，需要先感受一下单体应用的痛苦！</p><h3 id="单体应用架构的不足"><a href="#单体应用架构的不足" class="headerlink" title="单体应用架构的不足"></a>单体应用架构的不足</h3><p>以 MVC 架构为例，业务通常通过部署一个 WAR 包到 Tomcat 中，然后启动 Tomcat，监听某个端口号即可对外提供服务。早期在业务规模不大，开发团队人员规模较小的时候，采用单体应用架构，团队的开发和运维成本都可控，虽然偶尔也会解决一下冲突 -.-。然而随着业务规模越来越大，代码越来越多，依赖的资源也很多，应用编译打包、部署测试一次，甚至需要 10 分钟以上，部署效率低下。</p><p>团队开发人员不断的扩张，彼此协作开发成本高，比如超过十个人协作修改代码，最后合并到 master 分支，一起打包部署，这样到了测试阶段只要有一块功能有问题，就得重新编译打包部署，然后重新预览测试，所有开发人员参与其中，效率超低。。</p><p>系统的高可用性差，一旦某个功能涉及的代码或者资源有问题，就会影响系统的可用性。比如某段代码不停的创建大对象，并且没有回收，运行一段时间后导致 JVM 内存泄漏，异常退出，那么部署在同一个 JVM 进程中的所有服务都不可用，后果很严重。。</p><h3 id="我理解的微服务"><a href="#我理解的微服务" class="headerlink" title="我理解的微服务"></a>我理解的微服务</h3><p>为了解决以上问题，服务化的思想诞生了。通俗来讲，服务化就是把传统的单体应用中通过 JAR 包依赖产生的本地方法调用，改造成 RPC 接口产生的远程方法调用。</p><p>我过去的项目经历里，比如项目包含用户模块，权限模块，应用模块等，其中权限模块需要调用用户模块取用户信息，应用模块也需要，所以把用户模块拆分出来，独立成一个服务部署，以 RPC 接口的形式对外提供服务，这样当权限模块调用用户服务的时候从进程内的调用变成远程 RPC 调用，这样，用户服务就可以独立开发部署测试上线和运维，可以交由专门的团队来做。</p><blockquote><p>什么时候进行服务化拆分：项目第一个阶段主要目标是快速开发和验证想法，证明产品思路是可行。这个阶段的功能设计一般不会太复杂，开发采取快速迭代的方式，架构设计也不适合过度。所有功能打包部署在一起开发测试运维，是最高效也是最节约成本的方式。当可行性验证通过，功能进一步迭代，就可以加入越来越多的新特性。</p></blockquote><blockquote><p>服务化拆分的两个姿势: </p><ol><li>纵向拆分，是从业务维度进行拆分，关联比较密切的拆分成一个微服务，而功能相对独立的业务员适合拆分成一个微服务</li><li>横向拆分，将公共且独立的功能模块拆分成一个微服务，即公共的被多个其他服务调用，且依赖的资源不与其他业务耦合</li></ol></blockquote><blockquote><p>小总结：服务化拆分粒度更细，服务独立部署，独立维护，服务治理要求能力高一些。拆分成微服务之后服务的数量变多，需要统一的服务治理平台，来对各个服务进行管理</p></blockquote><p>可见通过服务化，可以解决单体应用膨胀、团队开发耦合度高、协作效率低下的问题。在我看来，微服务发展到现在，已经不再单单局限于微服务架构本身，还与容器化、DevOps 等新的理念相结合，成为当前移动互联网时代最先进的业务架构解决方案，能更好地迎合移动互联网业务快速迭代的要求。</p><h3 id="服务化拆分必须要面临的问题"><a href="#服务化拆分必须要面临的问题" class="headerlink" title="服务化拆分必须要面临的问题"></a>服务化拆分必须要面临的问题</h3><ol><li><p>服务如何定义：对于微服务来说，每个服务都运行在各自的进程中，应该以接口的形式向外界传达自己的信息，无论采用哪种通讯协议，是 HTTP 还是 RPC，服务之间的调用都通过接口描述来约定，约定包括接口名，接口参数以及接口的返回值</p></li><li><p>服务如何发布和订阅：服务调用者如何获取到需要调用服务的地址，这就需要一个注册中心</p></li><li><p>服务如何监控：通常对于一个服务，我们最关心的是 QPS（调用量）、AvgTime（平均耗时）以及 P999（99.9% 的请求性能在多少毫秒以内）这些指标。这时候你就需要一种通用的监控方案，能够覆盖业务埋点、数据收集、数据处理，最后到数据展示的全链路功能。</p></li><li><p>服务如何治理：可以想象，拆分为微服务架构后，服务的数量变多了，依赖关系也变复杂了。比如一个服务的性能有问题时，依赖的服务都势必会受到影响。可以设定一个调用性能阈值，如果一段时间内一直超过这个值，那么依赖服务的调用可以直接返回，这就是熔断，也是服务治理最常用的手段之一。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;维基百科定义微服务&quot;&gt;&lt;a href=&quot;#维基百科定义微服务&quot; class=&quot;headerlink&quot; title=&quot;维基百科定义微服务&quot;&gt;&lt;/a&gt;维基百科定义微服务&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;维基百科定义微服务：微服务的概念最早实在 2014 年由 
      
    
    </summary>
    
      <category term="初识微服务" scheme="http://seina.top/categories/%E5%88%9D%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务架构" scheme="http://seina.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>常见设计原则-单一职责原则</title>
    <link href="http://seina.top/2018/11/05/singleResponsibility/"/>
    <id>http://seina.top/2018/11/05/singleResponsibility/</id>
    <published>2018-11-05T03:30:50.000Z</published>
    <updated>2018-11-14T08:45:57.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小例子带你进入场景"><a href="#小例子带你进入场景" class="headerlink" title="小例子带你进入场景"></a>小例子带你进入场景</h3><p>例如我们日常生活中的手机，里面有摄像机、照片机、打电话、听音乐等多个功能，虽然手机小巧携带方便，但是显而易见，我们都知道手机的摄像功能没有摄像机拍摄的好，拍照功能没有照相机拍的好看。当然手机也只是过渡展品，如果摄像机，照相机像一张卡片那么大，又不失原有强大的拍照摄像功能，可能大家都不会用手机拍照了～</p><p>我们在编程的时候，自然而然的会给一个类增加各种各样的功能，比如我们写一个窗体应用程序，一般都会生成一个Forml这样的类，于是我们就会把各种各样的代码，像某种商业运算的算法呀，像数据库访问的SQL语句呀什么的都写到这样的类中，这就意味着，无论任何时候需求进来，你都需要更改这个窗体类，这其实是很糟糕的，维护麻烦，复用不可能，也缺乏灵活性。</p><p>再比如说我之前在高复用返回结果类ResultVO中加入JsonView时，这样一个类就具有了两个功能，后来我们老大说要把ResultVO统一拎出来管理，我那个服务的ResultVO打死也拎不动。。这就很尴尬了，可能当时一个类负责返回结果VO，另一个类负责JsonView展示，可能就会好很多。</p><h3 id="用最正确的姿势理解最简单的单一职责原则"><a href="#用最正确的姿势理解最简单的单一职责原则" class="headerlink" title="用最正确的姿势理解最简单的单一职责原则"></a>用最正确的姿势理解最简单的单一职责原则</h3><blockquote><p>单一职责原则：就一个类而言，应该仅有一个引起它变化的原因</p></blockquote><p>如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭到意想不到的破坏。</p><p>软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。其实要去判断是否应该分离出来也不是特别难，那就是如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责，就应该考虑类的职责分离。</p><blockquote><p>总结来说，在编程时，我们确实要在类的职责分离上多思考，做到单一职责，这样你的代码才是真正的易维护，易扩展，易复用，灵活多样。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;小例子带你进入场景&quot;&gt;&lt;a href=&quot;#小例子带你进入场景&quot; class=&quot;headerlink&quot; title=&quot;小例子带你进入场景&quot;&gt;&lt;/a&gt;小例子带你进入场景&lt;/h3&gt;&lt;p&gt;例如我们日常生活中的手机，里面有摄像机、照片机、打电话、听音乐等多个功能，虽然手机小
      
    
    </summary>
    
      <category term="大战设计模式" scheme="http://seina.top/categories/%E5%A4%A7%E6%88%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计原则" scheme="http://seina.top/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>常见设计原则-依赖倒置原则</title>
    <link href="http://seina.top/2018/11/04/dependencyInversion/"/>
    <id>http://seina.top/2018/11/04/dependencyInversion/</id>
    <published>2018-11-04T03:22:44.000Z</published>
    <updated>2018-11-14T07:04:24.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="加深依赖倒置原则定义的理解"><a href="#加深依赖倒置原则定义的理解" class="headerlink" title="加深依赖倒置原则定义的理解"></a>加深依赖倒置原则定义的理解</h3><blockquote><p>依赖倒置原则<br>A. 高层模块不应该依赖底层模块，两者都应该依赖其抽象<br>B. 抽象不应该依赖其细节，细节应该依赖抽象</p></blockquote><p>首先这不是小白级别的博客，只是我用来记录自己有关依赖倒置原则的理解，如果你一点都不了解依赖倒置原则，那么推荐一本大话设计模式～</p><p>好多人看完了依赖倒置原则都不理解，所谓的”倒置”，到底是在哪里，面向过程开发时，为了使得常用代码可以复用，一般都会把这些常用代码写成许许多多函数的程序库，这样我们在做新项目时，去调用这些底层的函数就可以的。比如我们做的项目大多数要访问数据库，所以我们就把访问数据库的代码写成了函数，每次做新项目的时候都要去调用这些函数，这就叫高层模块依赖底层模块。</p><p>这其实看起来并没有什么问题，业务逻辑的高层模块都是一样的，但客户希望使用不同的数据库或者存储信息方式，这时就麻烦了，我们希望再次利用这些高层模块，但是高层模块都是和底层模块绑在一起，没办法复用这些高层模块。例如PC电脑里如果CPU、内存、硬盘都需要依赖具体的主板，主板一坏，其他的部件就都没用了，反过来，如果内存坏了，也不应该造成其他部件不可用。</p><p>如果高层模块或者底层模块，它们都依赖于抽象，具体一点就是接口或者抽象类，只要接口是稳定的，那么任何一个改动都不用担心其他收到影响。</p><h3 id="通过coding进一步加深理解"><a href="#通过coding进一步加深理解" class="headerlink" title="通过coding进一步加深理解"></a>通过coding进一步加深理解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">课程接口</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICourse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">studyCourse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCourse</span> <span class="keyword">implements</span> <span class="title">ICourse</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Geely在学习Java课程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Geely</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ICourse iCourse;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setiCourse</span><span class="params">(ICourse iCourse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iCourse = iCourse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给Geely一个学习课程的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studyImoocCourse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        iCourse.studyCourse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 课程接口中有一个学习课程方法，有一个实现类重写了这个课程接口的方法</span></span><br><span class="line"><span class="comment">     * Geely有一个课程接口的属性，设置课程的方法，学习课程的方法（其中调用课程接口的学习课程的方法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Geely geely = <span class="keyword">new</span> Geely();</span><br><span class="line">        <span class="comment">//给Geely设置哪个课程，他就会调用哪个课程的学习方法</span></span><br><span class="line">        geely.setiCourse(<span class="keyword">new</span> JavaCourse());</span><br><span class="line">        geely.studyImoocCourse();</span><br><span class="line"></span><br><span class="line">        geely.setiCourse(<span class="keyword">new</span> FECourse());</span><br><span class="line">        geely.studyImoocCourse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，ICourse接口是固定不变，Test应用层应该没有依赖底层的Geely，而是Geely和Test都依赖其接口ICourse。</p><p>以上例子来源于<a href="https://coding.imooc.com/learn/list/270.html" target="_blank" rel="noopener">java设计模式精讲 Debug 方式+内存分析</a>，以及<a href="https://pan.baidu.com/s/1gyYmZiiRgxr85mwHz8UCGA" target="_blank" rel="noopener">大话设计模式pdf</a>–&gt;密码:ugu3</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;加深依赖倒置原则定义的理解&quot;&gt;&lt;a href=&quot;#加深依赖倒置原则定义的理解&quot; class=&quot;headerlink&quot; title=&quot;加深依赖倒置原则定义的理解&quot;&gt;&lt;/a&gt;加深依赖倒置原则定义的理解&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;依赖倒置原则&lt;br&gt;A. 
      
    
    </summary>
    
      <category term="大战设计模式" scheme="http://seina.top/categories/%E5%A4%A7%E6%88%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计原则" scheme="http://seina.top/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>常见设计原则-开闭原则</title>
    <link href="http://seina.top/2018/11/03/openClose/"/>
    <id>http://seina.top/2018/11/03/openClose/</id>
    <published>2018-11-03T03:31:38.000Z</published>
    <updated>2018-11-26T13:50:18.121Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><blockquote><p>包括：开闭原则，依赖倒置原则，单一职责原则，接口隔离原则，最少知道原则(迪米特法则)，里氏替换原则，合成复用原则(组合复用原则)。<br>在实际开发过程中讲究一个平衡和取舍，要在适当的场景遵循设计原则，不要过度设计。</p></blockquote><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>定义：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭，即可以扩展，不可以修改。用抽象构建框架，用实现扩展细节。<br>优点：提高软件系统的可复用性及可维护性<br>经典例子：一国两制，弹性8小时打卡</p><blockquote><p>核心思想：实现开闭原则的核心是面向抽象编程，而不是面向具体的实现编程</p></blockquote><p>我们在做任何系统的时候，都不要指定系统一开始的时候需求确定，就再也不会变化，这是不现实也不科学的想法，那么既然需求一定会变化，我们就应该重点关注怎么设计才能面对需求的改变却可以保持相对稳定。</p><p>越底层模块的变化影响的范围越大，越高层模块的变化影响的范围越小，简单理解，如果dao层被很多Service实现，如果改dao层，可能影响到其他模块的service，controller等。</p><p>如果接口里面有很多方法，实现类里面逻辑又很复杂，一旦改变了，风险很大，所以接口不应该经常变化，应该是稳定的，否则接口作为契约这个功能就失去了。既然抽象相对而言是稳定的，那么让类依赖于固定的抽象，就尽量不要修改原来稳定的代码，而通过面向对象的继承以及多态体的机制，就可以实现对抽象体的继承，通过重写改变其固有的方法，或者实现新的扩展方法，所以对扩展是开放对。</p><p>无论模块是多么封闭，都会存在一些无法对之封闭的变化。在我们最开始写代码的时候假设不会发生变化。当发生变化的时候，我们就立即采取行动，创建抽象来隔离以后发生的类似的变化。</p><blockquote><p>小总结：面对需求，我们对代码的改动是通过增加新代码进行的，而不是改动现有的代码。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;设计原则&quot;&gt;&lt;a href=&quot;#设计原则&quot; class=&quot;headerlink&quot; title=&quot;设计原则&quot;&gt;&lt;/a&gt;设计原则&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;包括：开闭原则，依赖倒置原则，单一职责原则，接口隔离原则，最少知道原则(迪米特法则)，里氏替换原则
      
    
    </summary>
    
      <category term="大战设计模式" scheme="http://seina.top/categories/%E5%A4%A7%E6%88%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计原则" scheme="http://seina.top/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>常见设计原则-组合复用原则</title>
    <link href="http://seina.top/2018/11/03/compositeReuse/"/>
    <id>http://seina.top/2018/11/03/compositeReuse/</id>
    <published>2018-11-03T01:28:37.000Z</published>
    <updated>2018-12-08T11:09:49.857Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/21541748561pic.png" alt="Image text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/21541748561pic.png&quot; alt=&quot;Image text&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="大战设计模式" scheme="http://seina.top/categories/%E5%A4%A7%E6%88%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计原则" scheme="http://seina.top/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>常见设计原则-里氏替换原则</title>
    <link href="http://seina.top/2018/11/02/ridleyReplace/"/>
    <id>http://seina.top/2018/11/02/ridleyReplace/</id>
    <published>2018-11-02T03:28:42.000Z</published>
    <updated>2018-11-14T14:35:17.146Z</updated>
    
    <content type="html"><![CDATA[<p>里氏替换原则：子类型必须能够替换掉它们的父类型。</p><blockquote><p>含义1：子类可以实现父类的抽象方法，但是不可以覆盖父类的非抽象方法<br>含义2：子类中可以增加自己特有的方法<br>含义3：当子类的方法重写父类的方法时，方法的前置条件(即方法的输入/输出)要比父类方法的输入参数更宽松<br>含义4：当子类的方法实现父类的方法时(重写/重载/实现抽象方法)，方法的后置条件(即方法的输出/返回值)要比父类更严格或者相等</p></blockquote><p>一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类和子类对象的区别，也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化，简单地说，子类型必须能够替换掉它们的父类型。</p><p>如果面向对象设计时，一个是鸟类，一个是企鹅类，如果鸟是可以飞的，企鹅不会飞，那么企鹅是鸟吗？企鹅可以继承鸟这个类吗？显然是不可以的，子类拥有父类所有非private的行为和属性。鸟会飞，而企鹅不会飞。尽管在生物学分类上，企鹅是一种鸟，但在编程世界里，企鹅不能以父类–鸟的身份出现，因为前提是说所有鸟都能飞，企鹅不能飞，所以企鹅不能继承鸟类。</p><p>也正是因为有了里氏替换原则，使得继承复用成为可能，只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正地被复用，而子类也能够在父类的基础上增加新的行为。比如说猫是继承动物类的，以动物的身份拥有吃、喝、跑、叫等行为，可当某一天，我们需要狗、牛、羊也拥有类似的行为，由于它们都是继承动物，所以更改实例化的地方，程序其他处都不需要改变。需要变化的是猫更换成狗、牛、羊等别的动物，程序其他地方不需要改变。</p><blockquote><p>正是由于子类型的可替换性才使得使用父类类型的模块在无需修改的情况下就可以扩展</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;里氏替换原则：子类型必须能够替换掉它们的父类型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;含义1：子类可以实现父类的抽象方法，但是不可以覆盖父类的非抽象方法&lt;br&gt;含义2：子类中可以增加自己特有的方法&lt;br&gt;含义3：当子类的方法重写父类的方法时，方法的前置条件(即方法的输入
      
    
    </summary>
    
      <category term="大战设计模式" scheme="http://seina.top/categories/%E5%A4%A7%E6%88%98%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计原则" scheme="http://seina.top/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
</feed>
